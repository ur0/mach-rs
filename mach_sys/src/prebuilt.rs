// Copyright (C) 2021 Umang Raghuvanshi.
// This file is a part of the mach-rs project and is licensed under the MIT license.
// See the LICENSE file in the project root for details.

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 64;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const PPNUM_MAX: u32 = 4294967295;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278665247;
pub const VM_FLAGS_USER_MAP: u32 = 4288102431;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAGS: u32 = 1;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PGUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MASTER_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_MAX_SPECIAL_PORT: u32 = 31;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_I386_INVOP: u32 = 1;
pub const EXC_I386_DIV: u32 = 1;
pub const EXC_I386_INTO: u32 = 2;
pub const EXC_I386_NOEXT: u32 = 3;
pub const EXC_I386_EXTOVR: u32 = 4;
pub const EXC_I386_EXTERR: u32 = 5;
pub const EXC_I386_EMERR: u32 = 6;
pub const EXC_I386_BOUND: u32 = 7;
pub const EXC_I386_SSEEXTERR: u32 = 8;
pub const EXC_I386_SGL: u32 = 1;
pub const EXC_I386_BPT: u32 = 2;
pub const EXC_I386_DIVERR: u32 = 0;
pub const EXC_I386_SGLSTP: u32 = 1;
pub const EXC_I386_NMIFLT: u32 = 2;
pub const EXC_I386_BPTFLT: u32 = 3;
pub const EXC_I386_INTOFLT: u32 = 4;
pub const EXC_I386_BOUNDFLT: u32 = 5;
pub const EXC_I386_INVOPFLT: u32 = 6;
pub const EXC_I386_NOEXTFLT: u32 = 7;
pub const EXC_I386_DBLFLT: u32 = 8;
pub const EXC_I386_EXTOVRFLT: u32 = 9;
pub const EXC_I386_INVTSSFLT: u32 = 10;
pub const EXC_I386_SEGNPFLT: u32 = 11;
pub const EXC_I386_STKFLT: u32 = 12;
pub const EXC_I386_GPFLT: u32 = 13;
pub const EXC_I386_PGFLT: u32 = 14;
pub const EXC_I386_EXTERRFLT: u32 = 16;
pub const EXC_I386_ALIGNFLT: u32 = 17;
pub const EXC_I386_ENDPERR: u32 = 33;
pub const EXC_I386_ENOEXTFLT: u32 = 32;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXC_CORPSE_VARIANT_BIT: u32 = 256;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3221225472;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const FPC_IE: u32 = 1;
pub const FPC_IM: u32 = 1;
pub const FPC_DE: u32 = 2;
pub const FPC_DM: u32 = 2;
pub const FPC_ZE: u32 = 4;
pub const FPC_ZM: u32 = 4;
pub const FPC_OE: u32 = 8;
pub const FPC_OM: u32 = 8;
pub const FPC_UE: u32 = 16;
pub const FPC_PE: u32 = 32;
pub const FPC_PC: u32 = 768;
pub const FPC_PC_24: u32 = 0;
pub const FPC_PC_53: u32 = 512;
pub const FPC_PC_64: u32 = 768;
pub const FPC_RC: u32 = 3072;
pub const FPC_RC_RN: u32 = 0;
pub const FPC_RC_RD: u32 = 1024;
pub const FPC_RC_RU: u32 = 2048;
pub const FPC_RC_CHOP: u32 = 3072;
pub const FPC_IC: u32 = 4096;
pub const FPC_IC_PROJ: u32 = 0;
pub const FPC_IC_AFF: u32 = 4096;
pub const FPS_IE: u32 = 1;
pub const FPS_DE: u32 = 2;
pub const FPS_ZE: u32 = 4;
pub const FPS_OE: u32 = 8;
pub const FPS_UE: u32 = 16;
pub const FPS_PE: u32 = 32;
pub const FPS_SF: u32 = 64;
pub const FPS_ES: u32 = 128;
pub const FPS_C0: u32 = 256;
pub const FPS_C1: u32 = 512;
pub const FPS_C2: u32 = 1024;
pub const FPS_TOS: u32 = 14336;
pub const FPS_TOS_SHIFT: u32 = 11;
pub const FPS_C3: u32 = 16384;
pub const FPS_BUSY: u32 = 32768;
pub const FP_NO: u32 = 0;
pub const FP_SOFT: u32 = 1;
pub const FP_287: u32 = 2;
pub const FP_387: u32 = 3;
pub const FP_FXSR: u32 = 4;
pub const I386_THREAD_STATE_MAX: u32 = 614;
pub const THREAD_STATE_MAX: u32 = 614;
pub const EFL_CF: u32 = 1;
pub const EFL_PF: u32 = 4;
pub const EFL_AF: u32 = 16;
pub const EFL_ZF: u32 = 64;
pub const EFL_SF: u32 = 128;
pub const EFL_TF: u32 = 256;
pub const EFL_IF: u32 = 512;
pub const EFL_DF: u32 = 1024;
pub const EFL_OF: u32 = 2048;
pub const EFL_IOPL: u32 = 12288;
pub const EFL_IOPL_KERNEL: u32 = 0;
pub const EFL_IOPL_USER: u32 = 12288;
pub const EFL_NT: u32 = 16384;
pub const EFL_RF: u32 = 65536;
pub const EFL_VM: u32 = 131072;
pub const EFL_AC: u32 = 262144;
pub const EFL_VIF: u32 = 524288;
pub const EFL_VIP: u32 = 1048576;
pub const EFL_ID: u32 = 2097152;
pub const EFL_CLR: u32 = 4294475816;
pub const EFL_SET: u32 = 2;
pub const EFL_USER_SET: u32 = 512;
pub const EFL_USER_CLEAR: u32 = 94208;
pub const i386_THREAD_STATE: u32 = 1;
pub const i386_FLOAT_STATE: u32 = 2;
pub const i386_EXCEPTION_STATE: u32 = 3;
pub const x86_THREAD_STATE32: u32 = 1;
pub const x86_FLOAT_STATE32: u32 = 2;
pub const x86_EXCEPTION_STATE32: u32 = 3;
pub const x86_THREAD_STATE64: u32 = 4;
pub const x86_FLOAT_STATE64: u32 = 5;
pub const x86_EXCEPTION_STATE64: u32 = 6;
pub const x86_THREAD_STATE: u32 = 7;
pub const x86_FLOAT_STATE: u32 = 8;
pub const x86_EXCEPTION_STATE: u32 = 9;
pub const x86_DEBUG_STATE32: u32 = 10;
pub const x86_DEBUG_STATE64: u32 = 11;
pub const x86_DEBUG_STATE: u32 = 12;
pub const THREAD_STATE_NONE: u32 = 13;
pub const x86_AVX_STATE32: u32 = 16;
pub const x86_AVX_STATE64: u32 = 17;
pub const x86_AVX_STATE: u32 = 18;
pub const x86_AVX512_STATE32: u32 = 19;
pub const x86_AVX512_STATE64: u32 = 20;
pub const x86_AVX512_STATE: u32 = 21;
pub const x86_PAGEIN_STATE: u32 = 22;
pub const x86_THREAD_FULL_STATE64: u32 = 23;
pub const x86_INSTRUCTION_STATE: u32 = 24;
pub const x86_LAST_BRANCH_STATE: u32 = 25;
pub const THREAD_MACHINE_STATE_MAX: u32 = 614;
pub const USER_CODE_SELECTOR: u32 = 23;
pub const USER_DATA_SELECTOR: u32 = 31;
pub const KERN_CODE_SELECTOR: u32 = 8;
pub const KERN_DATA_SELECTOR: u32 = 16;
pub const MACHINE_THREAD_STATE: u32 = 7;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_BASIC_INFO_64: u32 = 5;
pub const TASK_BASIC_INFO: u32 = 5;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_SEATBELT_PORT: u32 = 7;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const I386_PGBYTES: u32 = 4096;
pub const I386_PGSHIFT: u32 = 12;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const lock_set_MSG_COUNT: u32 = 6;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const SYNC_POLICY_MAX: u32 = 7;
pub const task_MSG_COUNT: u32 = 55;
pub const thread_act_MSG_COUNT: u32 = 29;
pub const vm_map_MSG_COUNT: u32 = 32;
pub const mach_port_MSG_COUNT: u32 = 40;
pub const _MACH_INIT_: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const clock_MSG_COUNT: u32 = 3;
pub const clock_reply_MSG_COUNT: u32 = 1;
pub const exc_MSG_COUNT: u32 = 3;
pub const HOST_REBOOT_HALT: u32 = 8;
pub const HOST_REBOOT_UPSDELAY: u32 = 256;
pub const HOST_REBOOT_DEBUGGER: u32 = 4096;
pub const TASK_PORT_REGISTER_MAX: u32 = 3;
pub const TASK_MAX_WATCHPORT_COUNT: u32 = 32;
pub const TASK_SELF_PORT_COUNT: u32 = 4;
pub const THREAD_SELF_PORT_COUNT: u32 = 3;
pub const mach_vm_MSG_COUNT: u32 = 21;
pub const mach_voucher_MSG_COUNT: u32 = 5;
pub const memory_entry_MSG_COUNT: u32 = 3;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type boolean_t = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_pset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_seqno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_seqno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_mscount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_mscount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_qlimit as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_qlimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_msgcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_msgcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_sorights as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_sorights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_srights as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_srights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_pdrequest as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pdrequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_nsrequest as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_nsrequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_flags)
        )
    );
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_limits>())).mpl_qlimit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_limits),
            "::",
            stringify!(mpl_qlimit)
        )
    );
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_info_ext>())).mpie_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_info_ext>())).mpie_boost_cnt as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_boost_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_info_ext>())).reserved as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(reserved)
        )
    );
}
pub type mach_port_info_ext_t = mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_qos>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_qos),
            "::",
            stringify!(len)
        )
    );
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_options__bindgen_ty_1>())).reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_options__bindgen_ty_1>())).work_interval_port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(work_interval_port)
        )
    );
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_options>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_options>())).mpl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(mpl)
        )
    );
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub type mach_port_guard_exception_codes = u32;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type uuid_t = __darwin_uuid_t;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_mach_msg_type_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_type_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_type_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_type_descriptor_t>())).pad1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_type_descriptor_t>())).pad2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad2)
        )
    );
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_mach_msg_port_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_port_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_port_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_port_descriptor_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_port_descriptor_t>())).pad1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor32_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor32_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor32_t>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor64_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor64_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor64_t>())).size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_ool_descriptor_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor32_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor32_t>())).address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor32_t>())).count as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor64_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor64_t>())).address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor64_t>())).count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor_t>())).count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor32_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor32_t>())).context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor32_t>())).name as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor64_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor64_t>())).context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor64_t>())).name as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor_t>())).context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor_t>())).name as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_mach_msg_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_descriptor_t>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_descriptor_t>())).out_of_line as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(out_of_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_descriptor_t>())).ool_ports as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(ool_ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_descriptor_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_descriptor_t>())).guarded_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(guarded_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_body_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_body_t>(),
        4usize,
        concat!("Size of: ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_body_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_body_t>())).msgh_descriptor_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_body_t),
            "::",
            stringify!(msgh_descriptor_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[test]
fn bindgen_test_layout_mach_msg_header_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_header_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_remote_port as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_remote_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_local_port as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_local_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_voucher_port as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_voucher_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[test]
fn bindgen_test_layout_mach_msg_base_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_base_t>(),
        28usize,
        concat!("Size of: ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_base_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_base_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_base_t>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(body)
        )
    );
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_trailer_t>(),
        8usize,
        concat!("Size of: ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_trailer_t>())).msgh_trailer_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_trailer_t>())).msgh_trailer_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout_mach_msg_seqno_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_seqno_trailer_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_seqno_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_seqno_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_seqno_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_seqno_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_security_token_t() {
    assert_eq!(
        ::std::mem::size_of::<security_token_t>(),
        8usize,
        concat!("Size of: ", stringify!(security_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<security_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(security_token_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<security_token_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(security_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_security_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_security_trailer_t>(),
        20usize,
        concat!("Size of: ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_security_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_audit_token_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_token_t>(),
        32usize,
        concat!("Size of: ", stringify!(audit_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_token_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_token_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_audit_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_audit_trailer_t>(),
        52usize,
        concat!("Size of: ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_audit_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_audit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout_mach_msg_context_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_context_trailer_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_context_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_audit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_context as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_msg_labels_t() {
    assert_eq!(
        ::std::mem::size_of::<msg_labels_t>(),
        4usize,
        concat!("Size of: ", stringify!(msg_labels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_labels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(msg_labels_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_labels_t>())).sender as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_labels_t),
            "::",
            stringify!(sender)
        )
    );
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[test]
fn bindgen_test_layout_mach_msg_mac_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_mac_trailer_t>(),
        68usize,
        concat!("Size of: ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_mac_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_audit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_context as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_ad as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_ad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_labels as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_labels)
        )
    );
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_send_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_send_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_send_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_send_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_send_t),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_rcv_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_rcv_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_rcv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_rcv_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_rcv_t>())).trailer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
    _bindgen_union_align: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_mach_msg_empty_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_t>())).send as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_t>())).rcv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(rcv)
        )
    );
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_statistics() {
    assert_eq!(
        ::std::mem::size_of::<vm_statistics>(),
        60usize,
        concat!("Size of: ", stringify!(vm_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_statistics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).free_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(free_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).active_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).inactive_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(inactive_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).wire_count as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(wire_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).zero_fill_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).reactivations as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(reactivations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).pageins as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).pageouts as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(pageouts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).faults as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).cow_faults as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).lookups as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).hits as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).purgeable_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).purges as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(purges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics>())).speculative_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(speculative_count)
        )
    );
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
#[test]
fn bindgen_test_layout_vm_statistics64() {
    assert_eq!(
        ::std::mem::size_of::<vm_statistics64>(),
        152usize,
        concat!("Size of: ", stringify!(vm_statistics64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics64>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_statistics64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).free_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(free_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).active_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).inactive_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(inactive_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).wire_count as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(wire_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).zero_fill_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).reactivations as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(reactivations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).pageins as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).pageouts as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(pageouts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).faults as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).cow_faults as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).lookups as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).hits as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).purges as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).purgeable_count as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_statistics64>())).speculative_count as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(speculative_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).decompressions as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(decompressions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).compressions as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).swapins as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(swapins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).swapouts as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(swapouts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_statistics64>())).compressor_page_count as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressor_page_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_statistics64>())).throttled_count as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(throttled_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_statistics64>())).external_page_count as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(external_page_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_statistics64>())).internal_page_count as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(internal_page_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_statistics64>())).total_uncompressed_pages_in_compressor
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(total_uncompressed_pages_in_compressor)
        )
    );
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
#[test]
fn bindgen_test_layout_vm_extmod_statistics() {
    assert_eq!(
        ::std::mem::size_of::<vm_extmod_statistics>(),
        48usize,
        concat!("Size of: ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_extmod_statistics>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_extmod_statistics>())).task_for_pid_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_extmod_statistics>())).task_for_pid_caller_count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_caller_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_extmod_statistics>())).thread_creation_count as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_extmod_statistics>())).thread_creation_caller_count
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_caller_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_extmod_statistics>())).thread_set_state_count as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_extmod_statistics>())).thread_set_state_caller_count
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_caller_count)
        )
    );
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_vm_purgeable_stat() {
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_stat>(),
        16usize,
        concat!("Size of: ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_purgeable_stat>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_stat),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_purgeable_stat>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_stat),
            "::",
            stringify!(size)
        )
    );
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
#[test]
fn bindgen_test_layout_vm_purgeable_info() {
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_info>(),
        272usize,
        concat!("Size of: ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_purgeable_info>())).fifo_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(fifo_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_purgeable_info>())).obsolete_data as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(obsolete_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_purgeable_info>())).lifo_data as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(lifo_data)
        )
    );
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub type virtual_memory_guard_exception_codes = u32;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[test]
fn bindgen_test_layout_time_value() {
    assert_eq!(
        ::std::mem::size_of::<time_value>(),
        8usize,
        concat!("Size of: ", stringify!(time_value))
    );
    assert_eq!(
        ::std::mem::align_of::<time_value>(),
        4usize,
        concat!("Alignment of ", stringify!(time_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<time_value>())).seconds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<time_value>())).microseconds as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(microseconds)
        )
    );
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
#[test]
fn bindgen_test_layout_host_can_has_debugger_info() {
    assert_eq!(
        ::std::mem::size_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Size of: ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_can_has_debugger_info>())).can_has_debugger as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_can_has_debugger_info),
            "::",
            stringify!(can_has_debugger)
        )
    );
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
#[test]
fn bindgen_test_layout_host_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<host_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(host_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_basic_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).max_cpus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(max_cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).avail_cpus as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(avail_cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).memory_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(memory_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).cpu_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).cpu_subtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).cpu_threadtype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_threadtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).physical_cpu as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_basic_info>())).physical_cpu_max as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).logical_cpu as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).logical_cpu_max as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_basic_info>())).max_mem as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(max_mem)
        )
    );
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
#[test]
fn bindgen_test_layout_host_sched_info() {
    assert_eq!(
        ::std::mem::size_of::<host_sched_info>(),
        8usize,
        concat!("Size of: ", stringify!(host_sched_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_sched_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_sched_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_sched_info>())).min_timeout as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_sched_info),
            "::",
            stringify!(min_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_sched_info>())).min_quantum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_sched_info),
            "::",
            stringify!(min_quantum)
        )
    );
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
#[test]
fn bindgen_test_layout_kernel_resource_sizes() {
    assert_eq!(
        ::std::mem::size_of::<kernel_resource_sizes>(),
        20usize,
        concat!("Size of: ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<kernel_resource_sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kernel_resource_sizes>())).task as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kernel_resource_sizes>())).thread as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kernel_resource_sizes>())).port as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kernel_resource_sizes>())).memory_region as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kernel_resource_sizes>())).memory_object as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_object)
        )
    );
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
#[test]
fn bindgen_test_layout_host_priority_info() {
    assert_eq!(
        ::std::mem::size_of::<host_priority_info>(),
        32usize,
        concat!("Size of: ", stringify!(host_priority_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_priority_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_priority_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).kernel_priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(kernel_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).system_priority as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(system_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).server_priority as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(server_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).user_priority as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(user_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).depress_priority as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(depress_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).idle_priority as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(idle_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).minimum_priority as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(minimum_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_priority_info>())).maximum_priority as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(maximum_priority)
        )
    );
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
#[test]
fn bindgen_test_layout_host_load_info() {
    assert_eq!(
        ::std::mem::size_of::<host_load_info>(),
        24usize,
        concat!("Size of: ", stringify!(host_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_load_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_load_info>())).avenrun as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_load_info),
            "::",
            stringify!(avenrun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_load_info>())).mach_factor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
#[test]
fn bindgen_test_layout_host_cpu_load_info() {
    assert_eq!(
        ::std::mem::size_of::<host_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<host_cpu_load_info>())).cpu_ticks as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
#[test]
fn bindgen_test_layout_host_preferred_user_arch() {
    assert_eq!(
        ::std::mem::size_of::<host_preferred_user_arch>(),
        8usize,
        concat!("Size of: ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        ::std::mem::align_of::<host_preferred_user_arch>(),
        4usize,
        concat!("Alignment of ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_preferred_user_arch>())).cpu_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<host_preferred_user_arch>())).cpu_subtype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_subtype)
        )
    );
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_perf_info() {
    assert_eq!(
        ::std::mem::size_of::<memory_object_perf_info>(),
        8usize,
        concat!("Size of: ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_perf_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_perf_info>())).cluster_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_perf_info>())).may_cache as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(may_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_attr_info() {
    assert_eq!(
        ::std::mem::size_of::<memory_object_attr_info>(),
        16usize,
        concat!("Size of: ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_attr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_attr_info>())).copy_strategy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_attr_info>())).cluster_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_attr_info>())).may_cache_object as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(may_cache_object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_attr_info>())).temporary as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(temporary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_behave_info() {
    assert_eq!(
        ::std::mem::size_of::<memory_object_behave_info>(),
        20usize,
        concat!("Size of: ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_behave_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_behave_info>())).copy_strategy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_behave_info>())).temporary as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(temporary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_behave_info>())).invalidate as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_behave_info>())).silent_overwrite as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(silent_overwrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<memory_object_behave_info>())).advisory_pageout as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(advisory_pageout)
        )
    );
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ecx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esi as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eflags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__cs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__es as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__fs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__gs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_rsrv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_xmm_reg>())).__xmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ymm_reg>())).__ymm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_zmm_reg>())).__zmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_opmask_reg>())).__opmask_reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsrmask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved1 as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__avx_reserved1 as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k0 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k1 as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k3 as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k4 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k5 as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k6 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k7 as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh0 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh1 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh2 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh3 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh4 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh5 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh6 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh7 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_stream_valid_bytes
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_stream_valid_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__out_of_synch as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__out_of_synch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_bytes as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_cacheline as *const _
                as usize
        },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_cacheline)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_record>())).__from_ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__from_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_record>())).__to_ip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__to_ip)
        )
    );
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_state>())).__lbr_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_state>())).__lbrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbrs)
        )
    );
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_pagein_state>())).__pagein_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rcx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdi as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsi as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsp as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r9 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r10 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r11 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r12 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r13 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r14 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r15 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__fs as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__gs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ds as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__es as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__gsbase as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__gsbase)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh10 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh11 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh12 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh13 as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh14 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh15 as *const _ as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh10 as *const _
                as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh11 as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh12 as *const _
                as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh13 as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh14 as *const _
                as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh15 as *const _
                as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k0 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k1 as *const _ as usize
        },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k2 as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k3 as *const _ as usize
        },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k4 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k5 as *const _ as usize
        },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k6 as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k7 as *const _ as usize
        },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh0 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh1 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh2 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh3 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh4 as *const _ as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh5 as *const _ as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh6 as *const _ as usize
        },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh7 as *const _ as usize
        },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh8 as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh9 as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh10 as *const _
                as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh11 as *const _
                as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh12 as *const _
                as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh13 as *const _
                as usize
        },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh14 as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh15 as *const _
                as usize
        },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm16 as *const _ as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm17 as *const _ as usize
        },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm18 as *const _ as usize
        },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm19 as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm20 as *const _ as usize
        },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm21 as *const _ as usize
        },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm22 as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm23 as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm24 as *const _ as usize
        },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm25 as *const _ as usize
        },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm26 as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm27 as *const _ as usize
        },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm28 as *const _ as usize
        },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm29 as *const _ as usize
        },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm30 as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm31 as *const _ as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr3 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr4 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr5 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr7 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_x86_state_hdr() {
    assert_eq!(
        ::std::mem::size_of::<x86_state_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(x86_state_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_state_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_state_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_state_hdr>())).flavor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_state_hdr),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_state_hdr>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_state_hdr),
            "::",
            stringify!(count)
        )
    );
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type x86_avx512_state32_t = __darwin_i386_avx512_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_thread_full_state64_t = __darwin_x86_thread_full_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_avx512_state64_t = __darwin_x86_avx512_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
pub type x86_pagein_state_t = __x86_pagein_state;
pub type x86_instruction_state_t = __x86_instruction_state;
pub type last_branch_state_t = __last_branch_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: x86_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_thread_state__bindgen_ty_1 {
    pub ts32: x86_thread_state32_t,
    pub ts64: x86_thread_state64_t,
    _bindgen_union_align: [u64; 21usize],
}
#[test]
fn bindgen_test_layout_x86_thread_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x86_thread_state__bindgen_ty_1>(),
        168usize,
        concat!("Size of: ", stringify!(x86_thread_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_thread_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_thread_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_thread_state__bindgen_ty_1>())).ts32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_thread_state__bindgen_ty_1>())).ts64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<x86_thread_state>(),
        176usize,
        concat!("Size of: ", stringify!(x86_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_thread_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_thread_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_thread_state>())).tsh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state),
            "::",
            stringify!(tsh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_thread_state>())).uts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state),
            "::",
            stringify!(uts)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: x86_float_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_float_state__bindgen_ty_1 {
    pub fs32: x86_float_state32_t,
    pub fs64: x86_float_state64_t,
    _bindgen_union_align: [u32; 131usize],
}
#[test]
fn bindgen_test_layout_x86_float_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x86_float_state__bindgen_ty_1>(),
        524usize,
        concat!("Size of: ", stringify!(x86_float_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_float_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_float_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_float_state__bindgen_ty_1>())).fs32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state__bindgen_ty_1),
            "::",
            stringify!(fs32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_float_state__bindgen_ty_1>())).fs64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state__bindgen_ty_1),
            "::",
            stringify!(fs64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_float_state() {
    assert_eq!(
        ::std::mem::size_of::<x86_float_state>(),
        532usize,
        concat!("Size of: ", stringify!(x86_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_float_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_float_state>())).fsh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state),
            "::",
            stringify!(fsh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_float_state>())).ufs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state),
            "::",
            stringify!(ufs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: x86_exception_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_exception_state__bindgen_ty_1 {
    pub es32: x86_exception_state32_t,
    pub es64: x86_exception_state64_t,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_x86_exception_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x86_exception_state__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(x86_exception_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_exception_state__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(x86_exception_state__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_exception_state__bindgen_ty_1>())).es32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state__bindgen_ty_1),
            "::",
            stringify!(es32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_exception_state__bindgen_ty_1>())).es64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state__bindgen_ty_1),
            "::",
            stringify!(es64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<x86_exception_state>(),
        24usize,
        concat!("Size of: ", stringify!(x86_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_exception_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_exception_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_exception_state>())).esh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state),
            "::",
            stringify!(esh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_exception_state>())).ues as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state),
            "::",
            stringify!(ues)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: x86_debug_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_debug_state__bindgen_ty_1 {
    pub ds32: x86_debug_state32_t,
    pub ds64: x86_debug_state64_t,
    _bindgen_union_align: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_x86_debug_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x86_debug_state__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(x86_debug_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_debug_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_debug_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_debug_state__bindgen_ty_1>())).ds32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state__bindgen_ty_1),
            "::",
            stringify!(ds32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_debug_state__bindgen_ty_1>())).ds64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state__bindgen_ty_1),
            "::",
            stringify!(ds64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_debug_state() {
    assert_eq!(
        ::std::mem::size_of::<x86_debug_state>(),
        72usize,
        concat!("Size of: ", stringify!(x86_debug_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_debug_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_debug_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_debug_state>())).dsh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state),
            "::",
            stringify!(dsh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_debug_state>())).uds as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state),
            "::",
            stringify!(uds)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx_state__bindgen_ty_1 {
    pub as32: x86_avx_state32_t,
    pub as64: x86_avx_state64_t,
    _bindgen_union_align: [u32; 211usize],
}
#[test]
fn bindgen_test_layout_x86_avx_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x86_avx_state__bindgen_ty_1>(),
        844usize,
        concat!("Size of: ", stringify!(x86_avx_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_avx_state__bindgen_ty_1>())).as32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state__bindgen_ty_1),
            "::",
            stringify!(as32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_avx_state__bindgen_ty_1>())).as64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state__bindgen_ty_1),
            "::",
            stringify!(as64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<x86_avx_state>(),
        852usize,
        concat!("Size of: ", stringify!(x86_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_avx_state>())).ash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state),
            "::",
            stringify!(ash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_avx_state>())).ufs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state),
            "::",
            stringify!(ufs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx512_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx512_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx512_state__bindgen_ty_1 {
    pub as32: x86_avx512_state32_t,
    pub as64: x86_avx512_state64_t,
    _bindgen_union_align: [u32; 611usize],
}
#[test]
fn bindgen_test_layout_x86_avx512_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<x86_avx512_state__bindgen_ty_1>(),
        2444usize,
        concat!("Size of: ", stringify!(x86_avx512_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx512_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx512_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_avx512_state__bindgen_ty_1>())).as32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state__bindgen_ty_1),
            "::",
            stringify!(as32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<x86_avx512_state__bindgen_ty_1>())).as64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state__bindgen_ty_1),
            "::",
            stringify!(as64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<x86_avx512_state>(),
        2452usize,
        concat!("Size of: ", stringify!(x86_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx512_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_avx512_state>())).ash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state),
            "::",
            stringify!(ash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<x86_avx512_state>())).ufs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state),
            "::",
            stringify!(ufs)
        )
    );
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
pub type x86_avx512_state_t = x86_avx512_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 614usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
#[derive(Debug)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mach_voucher_attr_recipe_data() {
    assert_eq!(
        ::std::mem::size_of::<mach_voucher_attr_recipe_data>(),
        16usize,
        concat!("Size of: ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_voucher_attr_recipe_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_voucher_attr_recipe_data>())).key as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_voucher_attr_recipe_data>())).command as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_voucher_attr_recipe_data>())).previous_voucher as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(previous_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_voucher_attr_recipe_data>())).content_size as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_voucher_attr_recipe_data>())).content as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content)
        )
    );
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub is_master: boolean_t,
}
#[test]
fn bindgen_test_layout_processor_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info>(),
        20usize,
        concat!("Size of: ", stringify!(processor_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_basic_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<processor_basic_info>())).cpu_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_basic_info>())).cpu_subtype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<processor_basic_info>())).running as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<processor_basic_info>())).slot_num as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(slot_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<processor_basic_info>())).is_master as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(is_master)
        )
    );
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_processor_cpu_load_info() {
    assert_eq!(
        ::std::mem::size_of::<processor_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_cpu_load_info>())).cpu_ticks as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_processor_set_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<processor_set_basic_info>(),
        8usize,
        concat!("Size of: ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_set_basic_info>())).processor_count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(processor_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_set_basic_info>())).default_policy as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(default_policy)
        )
    );
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
#[test]
fn bindgen_test_layout_processor_set_load_info() {
    assert_eq!(
        ::std::mem::size_of::<processor_set_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_set_load_info>())).task_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(task_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_set_load_info>())).thread_count as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(thread_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_set_load_info>())).load_average as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(load_average)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<processor_set_load_info>())).mach_factor as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_base() {
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_timeshare_base>())).base_priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_limit() {
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_timeshare_limit>())).max_priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_info() {
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_timeshare_info>())).max_priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_timeshare_info>())).base_priority as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_timeshare_info>())).cur_priority as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(cur_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_timeshare_info>())).depressed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_timeshare_info>())).depress_priority as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_base() {
    assert_eq!(
        ::std::mem::size_of::<policy_rr_base>(),
        8usize,
        concat!("Size of: ", stringify!(policy_rr_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_base>())).base_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_base),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_base>())).quantum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_base),
            "::",
            stringify!(quantum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_limit() {
    assert_eq!(
        ::std::mem::size_of::<policy_rr_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_limit>())).max_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_info() {
    assert_eq!(
        ::std::mem::size_of::<policy_rr_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_rr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_info>())).max_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_info>())).base_priority as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_info>())).quantum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(quantum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_info>())).depressed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_rr_info>())).depress_priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_base() {
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_fifo_base>())).base_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_limit() {
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_fifo_limit>())).max_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_info() {
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_info>(),
        16usize,
        concat!("Size of: ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_fifo_info>())).max_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_fifo_info>())).base_priority as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_fifo_info>())).depressed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<policy_fifo_info>())).depress_priority as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[test]
fn bindgen_test_layout_policy_bases() {
    assert_eq!(
        ::std::mem::size_of::<policy_bases>(),
        16usize,
        concat!("Size of: ", stringify!(policy_bases))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_bases>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_bases))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_bases>())).ts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_bases>())).rr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_bases>())).fifo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(fifo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[test]
fn bindgen_test_layout_policy_limits() {
    assert_eq!(
        ::std::mem::size_of::<policy_limits>(),
        12usize,
        concat!("Size of: ", stringify!(policy_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_limits))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_limits>())).ts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_limits>())).rr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_limits>())).fifo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(fifo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
#[test]
fn bindgen_test_layout_policy_infos() {
    assert_eq!(
        ::std::mem::size_of::<policy_infos>(),
        56usize,
        concat!("Size of: ", stringify!(policy_infos))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_infos>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_infos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_infos>())).ts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_infos>())).rr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<policy_infos>())).fifo as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(fifo)
        )
    );
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_32() {
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_32>(),
        32usize,
        concat!("Size of: ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_32>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_basic_info_32>())).suspend_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_32>())).virtual_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_basic_info_32>())).resident_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_32>())).user_time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_32>())).system_time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_32>())).policy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_64() {
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_64>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_basic_info_64>())).suspend_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_64>())).virtual_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_basic_info_64>())).resident_size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_64>())).user_time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_64>())).system_time as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info_64>())).policy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<task_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info>())).suspend_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info>())).virtual_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info>())).resident_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info>())).user_time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info>())).system_time as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_basic_info>())).policy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
#[test]
fn bindgen_test_layout_task_events_info() {
    assert_eq!(
        ::std::mem::size_of::<task_events_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_events_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_events_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_events_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).faults as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).pageins as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).cow_faults as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).messages_sent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_events_info>())).messages_received as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_received)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).syscalls_mach as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(syscalls_mach)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).syscalls_unix as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(syscalls_unix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_events_info>())).csw as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(csw)
        )
    );
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
#[test]
fn bindgen_test_layout_task_thread_times_info() {
    assert_eq!(
        ::std::mem::size_of::<task_thread_times_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_thread_times_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_thread_times_info>())).user_time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_thread_times_info>())).system_time as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(system_time)
        )
    );
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
#[test]
fn bindgen_test_layout_task_absolutetime_info() {
    assert_eq!(
        ::std::mem::size_of::<task_absolutetime_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_absolutetime_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_absolutetime_info>())).total_user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_absolutetime_info>())).total_system as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_absolutetime_info>())).threads_user as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_absolutetime_info>())).threads_system as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_system)
        )
    );
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
#[test]
fn bindgen_test_layout_task_kernelmemory_info() {
    assert_eq!(
        ::std::mem::size_of::<task_kernelmemory_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_kernelmemory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_kernelmemory_info>())).total_palloc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_palloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_kernelmemory_info>())).total_pfree as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_pfree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_kernelmemory_info>())).total_salloc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_salloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_kernelmemory_info>())).total_sfree as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_sfree)
        )
    );
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
#[test]
fn bindgen_test_layout_task_affinity_tag_info() {
    assert_eq!(
        ::std::mem::size_of::<task_affinity_tag_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_affinity_tag_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_affinity_tag_info>())).set_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(set_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_affinity_tag_info>())).min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_affinity_tag_info>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_affinity_tag_info>())).task_count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(task_count)
        )
    );
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
#[test]
fn bindgen_test_layout_task_dyld_info() {
    assert_eq!(
        ::std::mem::size_of::<task_dyld_info>(),
        20usize,
        concat!("Size of: ", stringify!(task_dyld_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_dyld_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_dyld_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_dyld_info>())).all_image_info_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_dyld_info>())).all_image_info_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_dyld_info>())).all_image_info_format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_format)
        )
    );
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
#[test]
fn bindgen_test_layout_task_extmod_info() {
    assert_eq!(
        ::std::mem::size_of::<task_extmod_info>(),
        64usize,
        concat!("Size of: ", stringify!(task_extmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_extmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_extmod_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_extmod_info>())).task_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(task_uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_extmod_info>())).extmod_statistics as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(extmod_statistics)
        )
    );
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
#[test]
fn bindgen_test_layout_mach_task_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<mach_task_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_task_basic_info>())).virtual_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_task_basic_info>())).resident_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_task_basic_info>())).resident_size_max as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_task_basic_info>())).user_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_task_basic_info>())).system_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_task_basic_info>())).policy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_task_basic_info>())).suspend_count as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
#[test]
fn bindgen_test_layout_task_power_info() {
    assert_eq!(
        ::std::mem::size_of::<task_power_info>(),
        48usize,
        concat!("Size of: ", stringify!(task_power_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_power_info>())).total_user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_power_info>())).total_system as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_power_info>())).task_interrupt_wakeups as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_interrupt_wakeups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_power_info>())).task_platform_idle_wakeups as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_platform_idle_wakeups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_power_info>())).task_timer_wakeups_bin_1 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_power_info>())).task_timer_wakeups_bin_2 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_2)
        )
    );
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
}
#[test]
fn bindgen_test_layout_task_vm_info() {
    assert_eq!(
        ::std::mem::size_of::<task_vm_info>(),
        348usize,
        concat!("Size of: ", stringify!(task_vm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_vm_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_vm_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).virtual_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).region_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(region_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).page_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).resident_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).resident_size_peak as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size_peak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).device as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).device_peak as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(device_peak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).internal as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).internal_peak as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(internal_peak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).external as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).external_peak as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(external_peak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).reusable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(reusable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).reusable_peak as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(reusable_peak)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).purgeable_volatile_pmap as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_pmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).purgeable_volatile_resident as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_resident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).purgeable_volatile_virtual as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_virtual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).compressed as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).compressed_peak as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_peak)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).compressed_lifetime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_lifetime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).phys_footprint as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).min_address as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(min_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).max_address as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(max_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_phys_footprint_peak as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_phys_footprint_peak)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_purgeable_nonvolatile as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_purgeable_novolatile_compressed
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_novolatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_purgeable_volatile as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_purgeable_volatile_compressed
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_network_nonvolatile as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_network_nonvolatile_compressed
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_network_volatile as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_network_volatile_compressed
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_media_footprint as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_media_footprint_compressed
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_media_nofootprint as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_media_nofootprint_compressed
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_graphics_footprint as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_graphics_footprint_compressed
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_graphics_nofootprint as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_graphics_nofootprint_compressed
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_neural_footprint as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_neural_footprint_compressed
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_neural_nofootprint as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).ledger_tag_neural_nofootprint_compressed
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_vm_info>())).limit_bytes_remaining as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(limit_bytes_remaining)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_vm_info>())).decompressions as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(decompressions)
        )
    );
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
#[test]
fn bindgen_test_layout_task_trace_memory_info() {
    assert_eq!(
        ::std::mem::size_of::<task_trace_memory_info>(),
        24usize,
        concat!("Size of: ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_trace_memory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_trace_memory_info>())).user_memory_address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(user_memory_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_trace_memory_info>())).buffer_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_trace_memory_info>())).mailbox_array_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(mailbox_array_size)
        )
    );
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_task_wait_state_info() {
    assert_eq!(
        ::std::mem::size_of::<task_wait_state_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_wait_state_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_wait_state_info>())).total_wait_state_time as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_state_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_wait_state_info>())).total_wait_sfi_state_time as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_sfi_state_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_wait_state_info>()))._reserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(_reserved)
        )
    );
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
#[test]
fn bindgen_test_layout_gpu_energy_data() {
    assert_eq!(
        ::std::mem::size_of::<gpu_energy_data>(),
        32usize,
        concat!("Size of: ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        ::std::mem::align_of::<gpu_energy_data>(),
        4usize,
        concat!("Alignment of ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gpu_energy_data>())).task_gpu_utilisation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_utilisation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gpu_energy_data>())).task_gpu_stat_reserved0 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gpu_energy_data>())).task_gpu_stat_reserved1 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gpu_energy_data>())).task_gpu_stat_reserved2 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved2)
        )
    );
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
#[test]
fn bindgen_test_layout_task_power_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<task_power_info_v2>(),
        96usize,
        concat!("Size of: ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info_v2>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_power_info_v2>())).cpu_energy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(cpu_energy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_power_info_v2>())).gpu_energy as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(gpu_energy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_power_info_v2>())).task_ptime as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_ptime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_power_info_v2>())).task_pset_switches as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_pset_switches)
        )
    );
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_task_flags_info() {
    assert_eq!(
        ::std::mem::size_of::<task_flags_info>(),
        4usize,
        concat!("Size of: ", stringify!(task_flags_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_flags_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_flags_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_flags_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_flags_info),
            "::",
            stringify!(flags)
        )
    );
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
#[test]
fn bindgen_test_layout_task_inspect_basic_counts() {
    assert_eq!(
        ::std::mem::size_of::<task_inspect_basic_counts>(),
        16usize,
        concat!("Size of: ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        ::std::mem::align_of::<task_inspect_basic_counts>(),
        8usize,
        concat!("Alignment of ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_inspect_basic_counts>())).instructions as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(instructions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_inspect_basic_counts>())).cycles as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(cycles)
        )
    );
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = i32;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
#[test]
fn bindgen_test_layout_task_category_policy() {
    assert_eq!(
        ::std::mem::size_of::<task_category_policy>(),
        4usize,
        concat!("Size of: ", stringify!(task_category_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_category_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_category_policy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_category_policy>())).role as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_category_policy),
            "::",
            stringify!(role)
        )
    );
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = u32;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = u32;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_task_qos_policy() {
    assert_eq!(
        ::std::mem::size_of::<task_qos_policy>(),
        8usize,
        concat!("Size of: ", stringify!(task_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_qos_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_qos_policy>())).task_latency_qos_tier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_latency_qos_tier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_qos_policy>())).task_throughput_qos_tier as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_throughput_qos_tier)
        )
    );
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
#[test]
fn bindgen_test_layout_thread_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<thread_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(thread_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_basic_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).user_time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).system_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).cpu_usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(cpu_usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).policy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).run_state as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(run_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).suspend_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_basic_info>())).sleep_time as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(sleep_time)
        )
    );
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
#[test]
fn bindgen_test_layout_thread_identifier_info() {
    assert_eq!(
        ::std::mem::size_of::<thread_identifier_info>(),
        24usize,
        concat!("Size of: ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_identifier_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_identifier_info>())).thread_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_identifier_info>())).thread_handle as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_identifier_info>())).dispatch_qaddr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(dispatch_qaddr)
        )
    );
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_thread_extended_info() {
    assert_eq!(
        ::std::mem::size_of::<thread_extended_info>(),
        112usize,
        concat!("Size of: ", stringify!(thread_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_extended_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_user_time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_system_time as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_cpu_usage as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_cpu_usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_extended_info>())).pth_policy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_run_state as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_run_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_extended_info>())).pth_flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_sleep_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_sleep_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_extended_info>())).pth_curpri as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_curpri)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_priority as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_info>())).pth_maxpriority as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_maxpriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_extended_info>())).pth_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_name)
        )
    );
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_io_stat_entry() {
    assert_eq!(
        ::std::mem::size_of::<io_stat_entry>(),
        16usize,
        concat!("Size of: ", stringify!(io_stat_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_entry>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_entry),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_entry>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_entry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
#[test]
fn bindgen_test_layout_io_stat_info() {
    assert_eq!(
        ::std::mem::size_of::<io_stat_info>(),
        128usize,
        concat!("Size of: ", stringify!(io_stat_info))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_info>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_info>())).disk_reads as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(disk_reads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_info>())).io_priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(io_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_info>())).paging as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(paging)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_info>())).metadata as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_stat_info>())).total_io as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(total_io)
        )
    );
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
#[test]
fn bindgen_test_layout_thread_standard_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_standard_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_standard_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<thread_standard_policy>())).no_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_standard_policy),
            "::",
            stringify!(no_data)
        )
    );
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_extended_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_extended_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_extended_policy>())).timeshare as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_policy),
            "::",
            stringify!(timeshare)
        )
    );
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_time_constraint_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_time_constraint_policy>(),
        16usize,
        concat!("Size of: ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_time_constraint_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_time_constraint_policy>())).period as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_time_constraint_policy>())).computation as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(computation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_time_constraint_policy>())).constraint as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_time_constraint_policy>())).preemptible as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(preemptible)
        )
    );
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
#[test]
fn bindgen_test_layout_thread_precedence_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_precedence_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_precedence_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_precedence_policy>())).importance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_precedence_policy),
            "::",
            stringify!(importance)
        )
    );
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
#[test]
fn bindgen_test_layout_thread_affinity_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_affinity_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_affinity_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_affinity_policy>())).affinity_tag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_affinity_policy),
            "::",
            stringify!(affinity_tag)
        )
    );
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
#[test]
fn bindgen_test_layout_thread_background_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_background_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_background_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_background_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_background_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_background_policy>())).priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_background_policy),
            "::",
            stringify!(priority)
        )
    );
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
#[test]
fn bindgen_test_layout_thread_latency_qos_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_latency_qos_policy>())).thread_latency_qos_tier
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_latency_qos_policy),
            "::",
            stringify!(thread_latency_qos_tier)
        )
    );
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_thread_throughput_qos_policy() {
    assert_eq!(
        ::std::mem::size_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_throughput_qos_policy>())).thread_throughput_qos_tier
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_throughput_qos_policy),
            "::",
            stringify!(thread_throughput_qos_tier)
        )
    );
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[test]
fn bindgen_test_layout_mach_timespec() {
    assert_eq!(
        ::std::mem::size_of::<mach_timespec>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_timespec>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info_64() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info_64>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info_64>())).protection as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info_64>())).max_protection as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info_64>())).inheritance as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info_64>())).shared as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info_64>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info_64>())).offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info_64>())).behavior as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info_64>())).user_wired_count as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info>(),
        32usize,
        concat!("Size of: ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info>())).protection as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info>())).max_protection as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info>())).inheritance as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info>())).shared as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info>())).reserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info>())).offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_basic_info>())).behavior as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_basic_info>())).user_wired_count as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_vm_region_extended_info() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_extended_info>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_extended_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).protection as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).user_tag as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).pages_resident as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).pages_shared_now_private as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).pages_swapped_out as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).pages_dirtied as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).ref_count as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).shadow_depth as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).external_pager as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).share_mode as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_extended_info>())).pages_reusable as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_reusable)
        )
    );
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_vm_region_top_info() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_top_info>(),
        20usize,
        concat!("Size of: ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_top_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_top_info>())).obj_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(obj_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_top_info>())).ref_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_top_info>())).private_pages_resident as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(private_pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_top_info>())).shared_pages_resident as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(shared_pages_resident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_top_info>())).share_mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(share_mode)
        )
    );
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info>(),
        60usize,
        concat!("Size of: ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).protection as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).max_protection as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).inheritance as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info>())).user_tag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).pages_resident as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).pages_shared_now_private as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).pages_swapped_out as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).pages_dirtied as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info>())).ref_count as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).shadow_depth as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).external_pager as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).share_mode as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info>())).is_submap as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info>())).behavior as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info>())).object_id as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info>())).user_wired_count as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info_64() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info_64>(),
        76usize,
        concat!("Size of: ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).protection as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).max_protection as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).inheritance as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_region_submap_info_64>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).user_tag as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).pages_resident as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).pages_shared_now_private
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).pages_swapped_out as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).pages_dirtied as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).ref_count as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).shadow_depth as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).external_pager as *const _ as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).share_mode as *const _ as usize
        },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).is_submap as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).behavior as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).object_id as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).user_wired_count as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).pages_reusable as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_reusable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_info_64>())).object_id_full as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id_full)
        )
    );
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_short_info_64() {
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_short_info_64>(),
        48usize,
        concat!("Size of: ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_short_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).protection as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).max_protection as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).inheritance as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).offset as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).user_tag as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).ref_count as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).shadow_depth as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).external_pager as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).share_mode as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).is_submap as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).behavior as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).object_id as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_region_submap_short_info_64>())).user_wired_count as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout_mach_vm_read_entry() {
    assert_eq!(
        ::std::mem::size_of::<mach_vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_vm_read_entry>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_read_entry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_vm_read_entry>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_read_entry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout_vm_read_entry() {
    assert_eq!(
        ::std::mem::size_of::<vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_read_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_read_entry>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_read_entry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_read_entry>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_read_entry),
            "::",
            stringify!(size)
        )
    );
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vm_page_info_basic() {
    assert_eq!(
        ::std::mem::size_of::<vm_page_info_basic>(),
        32usize,
        concat!("Size of: ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_page_info_basic>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_page_info_basic>())).disposition as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(disposition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_page_info_basic>())).ref_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_page_info_basic>())).object_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_page_info_basic>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_page_info_basic>())).depth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_page_info_basic>())).__pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(__pad)
        )
    );
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
#[test]
fn bindgen_test_layout_kmod_reference() {
    assert_eq!(
        ::std::mem::size_of::<kmod_reference>(),
        16usize,
        concat!("Size of: ", stringify!(kmod_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_reference>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_reference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_reference>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_reference),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_reference>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_reference),
            "::",
            stringify!(info)
        )
    );
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
#[test]
fn bindgen_test_layout_kmod_info() {
    assert_eq!(
        ::std::mem::size_of::<kmod_info>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).info_version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).version as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).reference_count as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).reference_list as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(reference_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).address as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).size as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).hdr_size as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).start as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info>())).stop as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(stop)
        )
    );
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
#[test]
fn bindgen_test_layout_kmod_info_32_v1() {
    assert_eq!(
        ::std::mem::size_of::<kmod_info_32_v1>(),
        168usize,
        concat!("Size of: ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_32_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).next_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(next_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).info_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).name as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).version as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).reference_count as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kmod_info_32_v1>())).reference_list_addr as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).address as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).size as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).hdr_size as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).start_addr as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(start_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_32_v1>())).stop_addr as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(stop_addr)
        )
    );
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
#[test]
fn bindgen_test_layout_kmod_info_64_v1() {
    assert_eq!(
        ::std::mem::size_of::<kmod_info_64_v1>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_64_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).next_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(next_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).info_version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).version as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).reference_count as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kmod_info_64_v1>())).reference_list_addr as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).address as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).size as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).hdr_size as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).start_addr as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(start_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kmod_info_64_v1>())).stop_addr as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(stop_addr)
        )
    );
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_fsid() {
    assert_eq!(
        ::std::mem::size_of::<fsid>(),
        8usize,
        concat!("Size of: ", stringify!(fsid))
    );
    assert_eq!(
        ::std::mem::align_of::<fsid>(),
        4usize,
        concat!("Alignment of ", stringify!(fsid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsid>())).val as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsid), "::", stringify!(val))
    );
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[test]
fn bindgen_test_layout_fsobj_id() {
    assert_eq!(
        ::std::mem::size_of::<fsobj_id>(),
        8usize,
        concat!("Size of: ", stringify!(fsobj_id))
    );
    assert_eq!(
        ::std::mem::align_of::<fsobj_id>(),
        4usize,
        concat!("Alignment of ", stringify!(fsobj_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsobj_id>())).fid_objno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_objno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsobj_id>())).fid_generation as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_generation)
        )
    );
}
pub type fsobj_id_t = fsobj_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[test]
fn bindgen_test_layout_dyld_kernel_image_info() {
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_image_info>(),
        40usize,
        concat!("Size of: ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dyld_kernel_image_info>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dyld_kernel_image_info>())).fsobjid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(fsobjid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dyld_kernel_image_info>())).fsid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_image_info>())).load_addr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(load_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_dyld_kernel_process_info() {
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_process_info>(),
        72usize,
        concat!("Size of: ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_process_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).cache_image_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(cache_image_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).timestamp as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).imageCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(imageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).initialImageCount as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(initialImageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).dyldState as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(dyldState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).no_cache as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(no_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dyld_kernel_process_info>())).private_cache as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(private_cache)
        )
    );
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type suid_cred_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_master_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 1024usize];
pub type suid_cred_path_t = [::std::os::raw::c_char; 1024usize];
pub type suid_cred_uid_t = u32;
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type size_t = __darwin_size_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
pub type ssize_t = __darwin_ssize_t;
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: size_t,
        __little: *const ::std::os::raw::c_void,
        __little_len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ssize_t,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub const OSUnknownByteOrder: _bindgen_ty_1 = 0;
pub const OSLittleEndian: _bindgen_ty_1 = 1;
pub const OSBigEndian: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_NDR_record_t() {
    assert_eq!(
        ::std::mem::size_of::<NDR_record_t>(),
        8usize,
        concat!("Size of: ", stringify!(NDR_record_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDR_record_t>(),
        1usize,
        concat!("Alignment of ", stringify!(NDR_record_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).mig_vers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(mig_vers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).if_vers as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(if_vers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).reserved1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).mig_encoding as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(mig_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).int_rep as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(int_rep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).char_rep as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(char_rep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).float_rep as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(float_rep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDR_record_t>())).reserved2 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(reserved2)
        )
    );
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_port_deleted_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_deleted_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_port_deleted_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_deleted_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_port_deleted_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_deleted_notification_t>())).not_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_deleted_notification_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_deleted_notification_t>())).not_port as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_deleted_notification_t>())).trailer as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_send_possible_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_send_possible_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_send_possible_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_send_possible_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_send_possible_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_send_possible_notification_t>())).not_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_send_possible_notification_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_send_possible_notification_t>())).not_port as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_send_possible_notification_t>())).trailer as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_port_destroyed_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_destroyed_notification_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_port_destroyed_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_destroyed_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_port_destroyed_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_destroyed_notification_t>())).not_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_destroyed_notification_t>())).not_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_destroyed_notification_t>())).not_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_destroyed_notification_t>())).trailer as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_no_senders_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_no_senders_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_no_senders_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_no_senders_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_no_senders_notification_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_no_senders_notification_t>())).not_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_no_senders_notification_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_no_senders_notification_t>())).not_count as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(not_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_no_senders_notification_t>())).trailer as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_send_once_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_send_once_notification_t>(),
        44usize,
        concat!("Size of: ", stringify!(mach_send_once_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_send_once_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_send_once_notification_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_send_once_notification_t>())).not_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_once_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_send_once_notification_t>())).trailer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_once_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_dead_name_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_dead_name_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_dead_name_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_dead_name_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_dead_name_notification_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_dead_name_notification_t>())).not_header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_dead_name_notification_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_dead_name_notification_t>())).not_port as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_dead_name_notification_t>())).trailer as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_routine_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<routine_descriptor>(),
        40usize,
        concat!("Size of: ", stringify!(routine_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<routine_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(routine_descriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<routine_descriptor>())).impl_routine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(impl_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<routine_descriptor>())).stub_routine as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(stub_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<routine_descriptor>())).argc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<routine_descriptor>())).descr_count as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(descr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<routine_descriptor>())).arg_descr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(arg_descr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<routine_descriptor>())).max_reply_msg as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(max_reply_msg)
        )
    );
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_mig_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<mig_subsystem>(),
        72usize,
        concat!("Size of: ", stringify!(mig_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_subsystem>(),
        8usize,
        concat!("Alignment of ", stringify!(mig_subsystem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_subsystem>())).server as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_subsystem>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_subsystem>())).end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_subsystem>())).maxsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(maxsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_subsystem>())).reserved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_subsystem>())).routine as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(routine)
        )
    );
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_mig_symtab() {
    assert_eq!(
        ::std::mem::size_of::<mig_symtab>(),
        24usize,
        concat!("Size of: ", stringify!(mig_symtab))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_symtab>(),
        8usize,
        concat!("Alignment of ", stringify!(mig_symtab))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_symtab>())).ms_routine_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_symtab),
            "::",
            stringify!(ms_routine_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_symtab>())).ms_routine_number as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_symtab),
            "::",
            stringify!(ms_routine_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_symtab>())).ms_routine as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_symtab),
            "::",
            stringify!(ms_routine)
        )
    );
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout_mig_reply_error_t() {
    assert_eq!(
        ::std::mem::size_of::<mig_reply_error_t>(),
        36usize,
        concat!("Size of: ", stringify!(mig_reply_error_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_reply_error_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mig_reply_error_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_reply_error_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_reply_error_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_reply_error_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_reply_error_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mig_reply_error_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_reply_error_t),
            "::",
            stringify!(RetCode)
        )
    );
}
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[test]
fn bindgen_test_layout___Request__clock_set_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__clock_set_time_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__clock_set_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__clock_set_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__clock_set_time_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_time_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_time_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__clock_set_time_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_time_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_time_t>())).new_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_time_t),
            "::",
            stringify!(new_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[test]
fn bindgen_test_layout___Request__clock_set_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__clock_set_attributes_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__clock_set_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__clock_set_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__clock_set_attributes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_attributes_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_attributes_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_attributes_t>())).flavor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_attributes_t>())).clock_attrCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_attributes_t),
            "::",
            stringify!(clock_attrCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_set_attributes_t>())).clock_attr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_set_attributes_t),
            "::",
            stringify!(clock_attr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
    _bindgen_union_align: [u32; 11usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__clock_priv_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__clock_priv_subsystem>(),
        44usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__clock_priv_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__clock_priv_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__clock_priv_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__clock_priv_subsystem>())).Request_clock_set_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__clock_priv_subsystem),
            "::",
            stringify!(Request_clock_set_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__clock_priv_subsystem>()))
                .Request_clock_set_attributes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__clock_priv_subsystem),
            "::",
            stringify!(Request_clock_set_attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__clock_set_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__clock_set_time_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__clock_set_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__clock_set_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__clock_set_time_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_set_time_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_set_time_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_set_time_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_set_time_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_set_time_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_set_time_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__clock_set_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__clock_set_attributes_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__clock_set_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__clock_set_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__clock_set_attributes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_set_attributes_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_set_attributes_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_set_attributes_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_set_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
    _bindgen_union_align: [u32; 9usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__clock_priv_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__clock_priv_subsystem>(),
        36usize,
        concat!("Size of: ", stringify!(__ReplyUnion__clock_priv_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__clock_priv_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__clock_priv_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__clock_priv_subsystem>())).Reply_clock_set_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__clock_priv_subsystem),
            "::",
            stringify!(Reply_clock_set_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__clock_priv_subsystem>()))
                .Reply_clock_set_attributes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__clock_priv_subsystem),
            "::",
            stringify!(Reply_clock_set_attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_space() {
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_space>())).iis_genno_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_genno_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_space>())).iis_table_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_table_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_space>())).iis_table_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_table_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_space>())).iis_tree_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_space>())).iis_tree_small as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_small)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_space>())).iis_tree_hash as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_hash)
        )
    );
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
#[test]
fn bindgen_test_layout_ipc_info_space_basic() {
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space_basic>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space_basic>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipc_info_space_basic>())).iisb_genno_mask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_genno_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipc_info_space_basic>())).iisb_table_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipc_info_space_basic>())).iisb_table_next as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipc_info_space_basic>())).iisb_table_inuse as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_inuse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipc_info_space_basic>())).iisb_reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_reserved)
        )
    );
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_name() {
    assert_eq!(
        ::std::mem::size_of::<ipc_info_name>(),
        28usize,
        concat!("Size of: ", stringify!(ipc_info_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_collision as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_collision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_urefs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_urefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_next as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_name>())).iin_hash as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_hash)
        )
    );
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_ipc_info_tree_name() {
    assert_eq!(
        ::std::mem::size_of::<ipc_info_tree_name>(),
        36usize,
        concat!("Size of: ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_tree_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_tree_name>())).iitn_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_tree_name>())).iitn_lchild as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_lchild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipc_info_tree_name>())).iitn_rchild as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_rchild)
        )
    );
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_mach_vm_info_region() {
    assert_eq!(
        ::std::mem::size_of::<mach_vm_info_region>(),
        56usize,
        concat!("Size of: ", stringify!(mach_vm_info_region))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_info_region>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_info_region))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_vm_info_region>())).vir_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_vm_info_region>())).vir_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_vm_info_region>())).vir_object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_vm_info_region>())).vir_offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_vm_info_region>())).vir_needs_copy as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_vm_info_region>())).vir_protection as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_vm_info_region>())).vir_max_protection as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_vm_info_region>())).vir_inheritance as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_vm_info_region>())).vir_wired_count as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_vm_info_region>())).vir_user_wired_count as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_info_region_64() {
    assert_eq!(
        ::std::mem::size_of::<vm_info_region_64>(),
        44usize,
        concat!("Size of: ", stringify!(vm_info_region_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_region_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_region_64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region_64>())).vir_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region_64>())).vir_end as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region_64>())).vir_object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region_64>())).vir_offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region_64>())).vir_needs_copy as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region_64>())).vir_protection as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region_64>())).vir_max_protection as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region_64>())).vir_inheritance as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region_64>())).vir_wired_count as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region_64>())).vir_user_wired_count as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_info_region() {
    assert_eq!(
        ::std::mem::size_of::<vm_info_region>(),
        40usize,
        concat!("Size of: ", stringify!(vm_info_region))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_region>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_region))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_end as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_needs_copy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_protection as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region>())).vir_max_protection as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_inheritance as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_region>())).vir_wired_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_region>())).vir_user_wired_count as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
#[test]
fn bindgen_test_layout_vm_info_object() {
    assert_eq!(
        ::std::mem::size_of::<vm_info_object>(),
        88usize,
        concat!("Size of: ", stringify!(vm_info_object))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_object>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_ref_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_ref_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_resident_page_count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_resident_page_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_absent_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_absent_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_copy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_shadow as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_shadow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_shadow_offset as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_shadow_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_paging_offset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_paging_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_copy_strategy as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_copy_strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_last_alloc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_last_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_paging_in_progress as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_paging_in_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_pager_created as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_pager_initialized as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_pager_ready as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_ready)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_can_persist as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_can_persist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_internal as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_temporary as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_temporary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_alive as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_alive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vm_info_object>())).vio_purgable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_purgable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vm_info_object>())).vio_purgable_volatile as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_purgable_volatile)
        )
    );
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_zone_name() {
    assert_eq!(
        ::std::mem::size_of::<zone_name>(),
        80usize,
        concat!("Size of: ", stringify!(zone_name))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_name>(),
        1usize,
        concat!("Alignment of ", stringify!(zone_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_name>())).zn_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_name),
            "::",
            stringify!(zn_name)
        )
    );
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
#[test]
fn bindgen_test_layout_zone_info() {
    assert_eq!(
        ::std::mem::size_of::<zone_info>(),
        56usize,
        concat!("Size of: ", stringify!(zone_info))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_info>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_cur_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_cur_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_max_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_max_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_elem_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_elem_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_alloc_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_alloc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_pageable as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_pageable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_sleepable as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_sleepable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_exhaustible as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_exhaustible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_info>())).zi_collectable as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_collectable)
        )
    );
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_mach_zone_name() {
    assert_eq!(
        ::std::mem::size_of::<mach_zone_name>(),
        80usize,
        concat!("Size of: ", stringify!(mach_zone_name))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_zone_name>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_zone_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_zone_name>())).mzn_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_name),
            "::",
            stringify!(mzn_name)
        )
    );
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
#[test]
fn bindgen_test_layout_mach_zone_info_data() {
    assert_eq!(
        ::std::mem::size_of::<mach_zone_info_data>(),
        64usize,
        concat!("Size of: ", stringify!(mach_zone_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_zone_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_zone_info_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_cur_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_cur_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_max_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_max_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_elem_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_elem_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_alloc_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_alloc_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_sum_size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_sum_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_exhaustible as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_exhaustible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_zone_info_data>())).mzi_collectable as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_collectable)
        )
    );
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
#[test]
fn bindgen_test_layout_task_zone_info_data() {
    assert_eq!(
        ::std::mem::size_of::<task_zone_info_data>(),
        88usize,
        concat!("Size of: ", stringify!(task_zone_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<task_zone_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(task_zone_info_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<task_zone_info_data>())).tzi_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_cur_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_cur_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_max_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_max_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_elem_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_elem_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_alloc_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_alloc_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_sum_size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_sum_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_exhaustible as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_exhaustible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_collectable as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_collectable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_caller_acct as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_caller_acct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_task_alloc as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_task_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<task_zone_info_data>())).tzi_task_free as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_task_free)
        )
    );
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_mach_memory_info() {
    assert_eq!(
        ::std::mem::size_of::<mach_memory_info>(),
        176usize,
        concat!("Size of: ", stringify!(mach_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_memory_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_memory_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).site as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(site)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).largest as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(largest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_memory_info>())).collectable_bytes as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(collectable_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).mapped as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(mapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).peak as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(peak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).tag as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).zone as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(zone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>()))._resvA as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(_resvA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>()))._resv as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(_resv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_memory_info>())).name as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(name)
        )
    );
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
#[test]
fn bindgen_test_layout_zone_btrecord() {
    assert_eq!(
        ::std::mem::size_of::<zone_btrecord>(),
        128usize,
        concat!("Size of: ", stringify!(zone_btrecord))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_btrecord>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_btrecord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_btrecord>())).ref_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_btrecord),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_btrecord>())).operation_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_btrecord),
            "::",
            stringify!(operation_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zone_btrecord>())).bt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_btrecord),
            "::",
            stringify!(bt)
        )
    );
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
#[test]
fn bindgen_test_layout_hash_info_bucket() {
    assert_eq!(
        ::std::mem::size_of::<hash_info_bucket>(),
        4usize,
        concat!("Size of: ", stringify!(hash_info_bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<hash_info_bucket>(),
        4usize,
        concat!("Alignment of ", stringify!(hash_info_bucket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hash_info_bucket>())).hib_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_info_bucket),
            "::",
            stringify!(hib_count)
        )
    );
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
#[test]
fn bindgen_test_layout_lockgroup_info() {
    assert_eq!(
        ::std::mem::size_of::<lockgroup_info>(),
        264usize,
        concat!("Size of: ", stringify!(lockgroup_info))
    );
    assert_eq!(
        ::std::mem::align_of::<lockgroup_info>(),
        8usize,
        concat!("Alignment of ", stringify!(lockgroup_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lockgroup_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lockgroup_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lockgroup_attr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lockgroup_attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_spin_cnt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_spin_util_cnt as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_util_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_spin_held_cnt as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_spin_miss_cnt as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_miss_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_spin_held_max as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_spin_held_cum as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_cum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_cnt as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_util_cnt as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_util_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_held_cnt as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_miss_cnt as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_miss_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_wait_cnt as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_held_max as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_held_cum as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_cum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_wait_max as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lockgroup_info>())).lock_mtx_wait_cum as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_cum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_cnt as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_util_cnt as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_util_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_held_cnt as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_miss_cnt as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_wait_cnt as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_held_max as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_held_cum as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_cum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_wait_max as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lockgroup_info>())).lock_rw_wait_cum as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_cum)
        )
    );
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_details() {
    assert_eq!(
        ::std::mem::size_of::<mach_core_details>(),
        32usize,
        concat!("Size of: ", stringify!(mach_core_details))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_details>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_details))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_details>())).gzip_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details),
            "::",
            stringify!(gzip_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_details>())).gzip_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details),
            "::",
            stringify!(gzip_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_details>())).core_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details),
            "::",
            stringify!(core_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_fileheader() {
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader>(),
        544usize,
        concat!("Size of: ", stringify!(mach_core_fileheader))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_fileheader>())).signature as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_fileheader>())).log_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(log_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_fileheader>())).log_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(log_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_fileheader>())).num_files as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(num_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_core_fileheader>())).files as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(files)
        )
    );
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_boot_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_boot_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_get_boot_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_boot_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_get_boot_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_boot_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_boot_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__host_reboot_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_reboot_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__host_reboot_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_reboot_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_reboot_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__host_reboot_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_reboot_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__host_reboot_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_reboot_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_reboot_t>())).options as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_reboot_t),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__host_priv_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_priv_statistics_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__host_priv_statistics_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_priv_statistics_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_priv_statistics_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_priv_statistics_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_priv_statistics_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_priv_statistics_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_priv_statistics_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_priv_statistics_t>())).flavor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_priv_statistics_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_priv_statistics_t>())).host_info_outCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_priv_statistics_t),
            "::",
            stringify!(host_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[test]
fn bindgen_test_layout___Request__host_default_memory_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_default_memory_manager_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_default_memory_manager_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_default_memory_manager_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_default_memory_manager_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_default_memory_manager_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_default_memory_manager_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_default_memory_manager_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_default_memory_manager_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_default_memory_manager_t>())).default_manager
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_default_memory_manager_t),
            "::",
            stringify!(default_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_default_memory_manager_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_default_memory_manager_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_default_memory_manager_t>())).cluster_size
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_default_memory_manager_t),
            "::",
            stringify!(cluster_size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__vm_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_wire_t>(),
        68usize,
        concat!("Size of: ", stringify!(__Request__vm_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_wire_t>())).msgh_body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_wire_t>())).task as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_wire_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_wire_t>())).address as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_wire_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_wire_t>())).desired_access as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_wire_t),
            "::",
            stringify!(desired_access)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__thread_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_wire_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__thread_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_wire_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_wire_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_wire_t>())).thread as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_wire_t),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_wire_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_wire_t>())).wired as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_wire_t),
            "::",
            stringify!(wired)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__vm_allocate_cpm_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_allocate_cpm_t>(),
        68usize,
        concat!("Size of: ", stringify!(__Request__vm_allocate_cpm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_allocate_cpm_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_allocate_cpm_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).task as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).size as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_cpm_t>())).flags as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_cpm_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_processors_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_processors_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_processors_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_processors_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_processors_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processors_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processors_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_clock_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_clock_control_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__host_get_clock_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_clock_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_get_clock_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_clock_control_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_clock_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_clock_control_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_clock_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_clock_control_t>())).clock_id as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_clock_control_t),
            "::",
            stringify!(clock_id)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__kmod_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__kmod_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__kmod_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__kmod_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__kmod_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_create_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_create_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_create_t>())).info as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_create_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[test]
fn bindgen_test_layout___Request__kmod_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__kmod_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__kmod_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__kmod_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__kmod_destroy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_destroy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_destroy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kmod_destroy_t>())).module as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_destroy_t),
            "::",
            stringify!(module)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__kmod_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__kmod_control_t>(),
        64usize,
        concat!("Size of: ", stringify!(__Request__kmod_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__kmod_control_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__kmod_control_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_control_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kmod_control_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_control_t>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_control_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kmod_control_t>())).module as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kmod_control_t>())).flavor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kmod_control_t>())).dataCnt as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_control_t),
            "::",
            stringify!(dataCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__host_get_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_special_port_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__host_get_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_get_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_special_port_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_special_port_t>())).node as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_special_port_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_special_port_t>())).which as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_special_port_t),
            "::",
            stringify!(which)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__host_set_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_set_special_port_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__host_set_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_set_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_set_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_special_port_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_special_port_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_special_port_t>())).port as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_special_port_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_special_port_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_special_port_t>())).which as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_special_port_t),
            "::",
            stringify!(which)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__host_set_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_set_exception_ports_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_set_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_set_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_set_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).new_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(new_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).behavior as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_exception_ports_t>())).new_flavor as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_exception_ports_t),
            "::",
            stringify!(new_flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_exception_ports_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_get_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_get_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_exception_ports_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__host_swap_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_swap_exception_ports_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_swap_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_swap_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_swap_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).new_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(new_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).behavior as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_swap_exception_ports_t>())).new_flavor
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_swap_exception_ports_t),
            "::",
            stringify!(new_flavor)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_wire_t>(),
        68usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).task as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_wire_t>())).desired_access as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_wire_t),
            "::",
            stringify!(desired_access)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_processor_sets_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_processor_sets_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_processor_sets_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_processor_sets_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_processor_sets_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_sets_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_sets_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__host_processor_set_priv_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_processor_set_priv_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_processor_set_priv_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_processor_set_priv_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_processor_set_priv_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_set_priv_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_set_priv_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_set_priv_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_set_priv_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_set_priv_t>())).set_name as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_set_priv_t),
            "::",
            stringify!(set_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__host_set_UNDServer_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_set_UNDServer_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__host_set_UNDServer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_set_UNDServer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_set_UNDServer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_UNDServer_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_UNDServer_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_UNDServer_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_UNDServer_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_UNDServer_t>())).server as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_UNDServer_t),
            "::",
            stringify!(server)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_UNDServer_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_UNDServer_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_get_UNDServer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_UNDServer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_get_UNDServer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_UNDServer_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_UNDServer_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__kext_request_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__kext_request_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__kext_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__kext_request_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__kext_request_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kext_request_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kext_request_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kext_request_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kext_request_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kext_request_t>())).request_data as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kext_request_t),
            "::",
            stringify!(request_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kext_request_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kext_request_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kext_request_t>())).user_log_flags as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kext_request_t),
            "::",
            stringify!(user_log_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__kext_request_t>())).request_dataCnt as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kext_request_t),
            "::",
            stringify!(request_dataCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
    _bindgen_union_align: [u32; 17usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__host_priv_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__host_priv_subsystem>(),
        68usize,
        concat!("Size of: ", stringify!(__RequestUnion__host_priv_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__host_priv_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__host_priv_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_get_boot_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_get_boot_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_host_reboot
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_reboot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_priv_statistics as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_priv_statistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_default_memory_manager as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_default_memory_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_vm_wire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_vm_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_thread_wire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_thread_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_vm_allocate_cpm
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_vm_allocate_cpm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_host_processors
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_processors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_get_clock_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_get_clock_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_kmod_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_kmod_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_kmod_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_kmod_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_kmod_control
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_kmod_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_get_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_get_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_set_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_set_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_set_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_set_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_get_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_get_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_swap_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_swap_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_mach_vm_wire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_mach_vm_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_processor_sets as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_processor_sets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_processor_set_priv as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_processor_set_priv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_set_UNDServer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_set_UNDServer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>()))
                .Request_host_get_UNDServer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_host_get_UNDServer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_priv_subsystem>())).Request_kext_request
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_priv_subsystem),
            "::",
            stringify!(Request_kext_request)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[test]
fn bindgen_test_layout___Reply__host_get_boot_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_boot_info_t>(),
        4140usize,
        concat!("Size of: ", stringify!(__Reply__host_get_boot_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_boot_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_get_boot_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_boot_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_boot_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_boot_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_boot_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_boot_info_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_boot_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_boot_info_t>())).boot_infoOffset as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_boot_info_t),
            "::",
            stringify!(boot_infoOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_boot_info_t>())).boot_infoCnt as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_boot_info_t),
            "::",
            stringify!(boot_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_boot_info_t>())).boot_info as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_boot_info_t),
            "::",
            stringify!(boot_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_reboot_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_reboot_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__host_reboot_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_reboot_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_reboot_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_reboot_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_reboot_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_reboot_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_reboot_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_reboot_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_reboot_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[test]
fn bindgen_test_layout___Reply__host_priv_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_priv_statistics_t>(),
        312usize,
        concat!("Size of: ", stringify!(__Reply__host_priv_statistics_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_priv_statistics_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_priv_statistics_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_priv_statistics_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_priv_statistics_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_priv_statistics_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_priv_statistics_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_priv_statistics_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_priv_statistics_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_priv_statistics_t>())).host_info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_priv_statistics_t),
            "::",
            stringify!(host_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_priv_statistics_t>())).host_info_out as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_priv_statistics_t),
            "::",
            stringify!(host_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_default_memory_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_default_memory_manager_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_default_memory_manager_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_default_memory_manager_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_default_memory_manager_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_default_memory_manager_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_default_memory_manager_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_default_memory_manager_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_default_memory_manager_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_default_memory_manager_t>())).default_manager
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_default_memory_manager_t),
            "::",
            stringify!(default_manager)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_wire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_wire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_wire_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_wire_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_wire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_wire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_wire_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_wire_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_allocate_cpm_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_allocate_cpm_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__vm_allocate_cpm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_allocate_cpm_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_allocate_cpm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_allocate_cpm_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_cpm_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_allocate_cpm_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_cpm_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_allocate_cpm_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_cpm_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_allocate_cpm_t>())).address as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_cpm_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__host_processors_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_processors_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__host_processors_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_processors_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_processors_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_processors_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processors_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processors_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processors_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processors_t>())).out_processor_list as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processors_t),
            "::",
            stringify!(out_processor_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_processors_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processors_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processors_t>())).out_processor_listCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processors_t),
            "::",
            stringify!(out_processor_listCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_get_clock_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_clock_control_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_get_clock_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_clock_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_get_clock_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_clock_control_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_clock_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_clock_control_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_clock_control_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_clock_control_t>())).clock_ctrl as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_clock_control_t),
            "::",
            stringify!(clock_ctrl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[test]
fn bindgen_test_layout___Reply__kmod_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__kmod_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__kmod_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__kmod_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__kmod_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_create_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_create_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_create_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_create_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_create_t>())).module as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_create_t),
            "::",
            stringify!(module)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__kmod_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__kmod_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__kmod_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__kmod_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__kmod_destroy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_destroy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_destroy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_destroy_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__kmod_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__kmod_control_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__kmod_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__kmod_control_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__kmod_control_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_control_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kmod_control_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_control_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_control_t>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_control_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_control_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_control_t>())).dataCnt as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_control_t),
            "::",
            stringify!(dataCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_get_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_special_port_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_get_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_get_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_special_port_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_special_port_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_special_port_t>())).port as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_special_port_t),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_set_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_set_special_port_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__host_set_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_set_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_set_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_special_port_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_special_port_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_special_port_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_set_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_set_exception_ports_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__host_set_exception_ports_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_set_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_set_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_exception_ports_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_exception_ports_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_exception_ports_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__host_get_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_exception_ports_t>(),
        808usize,
        concat!("Size of: ", stringify!(__Reply__host_get_exception_ports_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_get_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).old_handlers as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(old_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).NDR as *const _ as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).masksCnt as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(masksCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).masks as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).old_behaviors
                as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(old_behaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_exception_ports_t>())).old_flavors as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_exception_ports_t),
            "::",
            stringify!(old_flavors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__host_swap_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_swap_exception_ports_t>(),
        808usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_swap_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_swap_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_swap_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).old_handlerss
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(old_handlerss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).NDR as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).masksCnt as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(masksCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).masks as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).old_behaviors
                as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(old_behaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_swap_exception_ports_t>())).old_flavors as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_swap_exception_ports_t),
            "::",
            stringify!(old_flavors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_wire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_wire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_wire_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_wire_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__host_processor_sets_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_processor_sets_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__host_processor_sets_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_processor_sets_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_processor_sets_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_sets_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_sets_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_sets_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_sets_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_sets_t>())).processor_sets as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_sets_t),
            "::",
            stringify!(processor_sets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_sets_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_sets_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_sets_t>())).processor_setsCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_sets_t),
            "::",
            stringify!(processor_setsCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_processor_set_priv_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_processor_set_priv_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_processor_set_priv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_processor_set_priv_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_processor_set_priv_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_set_priv_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_set_priv_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_set_priv_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_set_priv_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_set_priv_t>())).set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_set_priv_t),
            "::",
            stringify!(set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_set_UNDServer_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_set_UNDServer_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__host_set_UNDServer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_set_UNDServer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_set_UNDServer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_UNDServer_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_UNDServer_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_UNDServer_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_UNDServer_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_UNDServer_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_UNDServer_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_get_UNDServer_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_UNDServer_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_get_UNDServer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_UNDServer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_get_UNDServer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_UNDServer_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_UNDServer_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_UNDServer_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_UNDServer_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_UNDServer_t>())).server as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_UNDServer_t),
            "::",
            stringify!(server)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__kext_request_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__kext_request_t>(),
        80usize,
        concat!("Size of: ", stringify!(__Reply__kext_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__kext_request_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__kext_request_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kext_request_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kext_request_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kext_request_t>())).response_data as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(response_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kext_request_t>())).log_data as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(log_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kext_request_t>())).NDR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kext_request_t>())).response_dataCnt as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(response_dataCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kext_request_t>())).log_dataCnt as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(log_dataCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kext_request_t>())).op_result as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kext_request_t),
            "::",
            stringify!(op_result)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
    _bindgen_union_align: [u32; 1035usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__host_priv_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__host_priv_subsystem>(),
        4140usize,
        concat!("Size of: ", stringify!(__ReplyUnion__host_priv_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__host_priv_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__host_priv_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_get_boot_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_get_boot_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_reboot
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_reboot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_priv_statistics
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_priv_statistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_default_memory_manager as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_default_memory_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_vm_wire as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_vm_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_thread_wire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_thread_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_vm_allocate_cpm
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_vm_allocate_cpm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_processors
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_processors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_get_clock_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_get_clock_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_kmod_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_kmod_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_kmod_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_kmod_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_kmod_control
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_kmod_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_get_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_get_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_set_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_set_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_set_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_set_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_get_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_get_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_swap_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_swap_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_mach_vm_wire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_mach_vm_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_processor_sets
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_processor_sets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>()))
                .Reply_host_processor_set_priv as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_processor_set_priv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_set_UNDServer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_set_UNDServer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_host_get_UNDServer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_host_get_UNDServer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_priv_subsystem>())).Reply_kext_request
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_priv_subsystem),
            "::",
            stringify!(Reply_kext_request)
        )
    );
}
extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__host_security_create_task_token_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_security_create_task_token_t>(),
        124usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_security_create_task_token_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_security_create_task_token_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_security_create_task_token_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).parent_task
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(parent_task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).host
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).ledgers
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(ledgers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).NDR as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).sec_token
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(sec_token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).audit_token
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(audit_token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).ledgersCnt
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(ledgersCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_create_task_token_t>())).inherit_memory
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_create_task_token_t),
            "::",
            stringify!(inherit_memory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[test]
fn bindgen_test_layout___Request__host_security_set_task_token_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_security_set_task_token_t>(),
        100usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_security_set_task_token_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_security_set_task_token_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_security_set_task_token_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).target_task
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(target_task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).host as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).NDR as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).sec_token
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(sec_token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_security_set_task_token_t>())).audit_token
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_security_set_task_token_t),
            "::",
            stringify!(audit_token)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
    _bindgen_union_align: [u32; 31usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__host_security_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__host_security_subsystem>(),
        124usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__host_security_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__host_security_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__host_security_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_security_subsystem>()))
                .Request_host_security_create_task_token as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_security_subsystem),
            "::",
            stringify!(Request_host_security_create_task_token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__host_security_subsystem>()))
                .Request_host_security_set_task_token as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__host_security_subsystem),
            "::",
            stringify!(Request_host_security_set_task_token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_security_create_task_token_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_security_create_task_token_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_security_create_task_token_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_security_create_task_token_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_security_create_task_token_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_security_create_task_token_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_security_create_task_token_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_security_create_task_token_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_security_create_task_token_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_security_create_task_token_t>())).child_task
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_security_create_task_token_t),
            "::",
            stringify!(child_task)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_security_set_task_token_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_security_set_task_token_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_security_set_task_token_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_security_set_task_token_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_security_set_task_token_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_security_set_task_token_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_security_set_task_token_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_security_set_task_token_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_security_set_task_token_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_security_set_task_token_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_security_set_task_token_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
    _bindgen_union_align: [u32; 10usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__host_security_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__host_security_subsystem>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__ReplyUnion__host_security_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__host_security_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__host_security_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_security_subsystem>()))
                .Reply_host_security_create_task_token as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_security_subsystem),
            "::",
            stringify!(Reply_host_security_create_task_token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__host_security_subsystem>()))
                .Reply_host_security_set_task_token as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__host_security_subsystem),
            "::",
            stringify!(Reply_host_security_set_task_token)
        )
    );
}
extern "C" {
    pub fn lock_acquire(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn lock_release(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn lock_try(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn lock_make_stable(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn lock_handoff(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn lock_handoff_accept(
        lock_set: lock_set_t,
        lock_id: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_acquire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_acquire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_acquire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__lock_acquire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_acquire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_acquire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_acquire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_acquire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_acquire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_acquire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_acquire_t>())).lock_id as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_acquire_t),
            "::",
            stringify!(lock_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_release_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_release_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_release_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__lock_release_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_release_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_release_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_release_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_release_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_release_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_release_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_release_t>())).lock_id as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_release_t),
            "::",
            stringify!(lock_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_try_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_try_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_try_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__lock_try_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_try_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_try_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_try_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_try_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_try_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_try_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_try_t>())).lock_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_try_t),
            "::",
            stringify!(lock_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_make_stable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_make_stable_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_make_stable_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__lock_make_stable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_make_stable_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_make_stable_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_make_stable_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_make_stable_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_make_stable_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_make_stable_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_make_stable_t>())).lock_id as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_make_stable_t),
            "::",
            stringify!(lock_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_handoff_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_handoff_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_handoff_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__lock_handoff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_handoff_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_handoff_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_handoff_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_handoff_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__lock_handoff_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_handoff_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_handoff_t>())).lock_id as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_handoff_t),
            "::",
            stringify!(lock_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_handoff_accept_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_handoff_accept_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_handoff_accept_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__lock_handoff_accept_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_handoff_accept_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__lock_handoff_accept_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_handoff_accept_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_handoff_accept_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_handoff_accept_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_handoff_accept_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_handoff_accept_t>())).lock_id as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_handoff_accept_t),
            "::",
            stringify!(lock_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__lock_set_subsystem {
    pub Request_lock_acquire: __Request__lock_acquire_t,
    pub Request_lock_release: __Request__lock_release_t,
    pub Request_lock_try: __Request__lock_try_t,
    pub Request_lock_make_stable: __Request__lock_make_stable_t,
    pub Request_lock_handoff: __Request__lock_handoff_t,
    pub Request_lock_handoff_accept: __Request__lock_handoff_accept_t,
    _bindgen_union_align: [u32; 9usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__lock_set_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__lock_set_subsystem>(),
        36usize,
        concat!("Size of: ", stringify!(__RequestUnion__lock_set_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__lock_set_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__lock_set_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__lock_set_subsystem>())).Request_lock_acquire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__lock_set_subsystem),
            "::",
            stringify!(Request_lock_acquire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__lock_set_subsystem>())).Request_lock_release
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__lock_set_subsystem),
            "::",
            stringify!(Request_lock_release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__lock_set_subsystem>())).Request_lock_try
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__lock_set_subsystem),
            "::",
            stringify!(Request_lock_try)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__lock_set_subsystem>())).Request_lock_make_stable
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__lock_set_subsystem),
            "::",
            stringify!(Request_lock_make_stable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__lock_set_subsystem>())).Request_lock_handoff
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__lock_set_subsystem),
            "::",
            stringify!(Request_lock_handoff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__lock_set_subsystem>()))
                .Request_lock_handoff_accept as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__lock_set_subsystem),
            "::",
            stringify!(Request_lock_handoff_accept)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_acquire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_acquire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_acquire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_acquire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_acquire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_acquire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_acquire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_acquire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_acquire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_acquire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_acquire_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_acquire_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_release_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_release_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_release_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_release_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_release_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_release_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_release_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_release_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_release_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_release_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_release_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_release_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_try_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_try_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_try_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_try_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_try_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_try_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_try_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_try_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_try_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_try_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_try_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_try_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_make_stable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_make_stable_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_make_stable_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_make_stable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_make_stable_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_make_stable_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_make_stable_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_make_stable_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_make_stable_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_make_stable_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_make_stable_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_make_stable_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_handoff_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_handoff_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_handoff_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_handoff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_handoff_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_handoff_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_handoff_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_handoff_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_handoff_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_handoff_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_handoff_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_handoff_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_handoff_accept_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_handoff_accept_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_handoff_accept_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_handoff_accept_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_handoff_accept_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_handoff_accept_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_handoff_accept_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_handoff_accept_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_handoff_accept_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_handoff_accept_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_handoff_accept_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_handoff_accept_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__lock_set_subsystem {
    pub Reply_lock_acquire: __Reply__lock_acquire_t,
    pub Reply_lock_release: __Reply__lock_release_t,
    pub Reply_lock_try: __Reply__lock_try_t,
    pub Reply_lock_make_stable: __Reply__lock_make_stable_t,
    pub Reply_lock_handoff: __Reply__lock_handoff_t,
    pub Reply_lock_handoff_accept: __Reply__lock_handoff_accept_t,
    _bindgen_union_align: [u32; 9usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__lock_set_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__lock_set_subsystem>(),
        36usize,
        concat!("Size of: ", stringify!(__ReplyUnion__lock_set_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__lock_set_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__lock_set_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__lock_set_subsystem>())).Reply_lock_acquire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__lock_set_subsystem),
            "::",
            stringify!(Reply_lock_acquire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__lock_set_subsystem>())).Reply_lock_release
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__lock_set_subsystem),
            "::",
            stringify!(Reply_lock_release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__lock_set_subsystem>())).Reply_lock_try as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__lock_set_subsystem),
            "::",
            stringify!(Reply_lock_try)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__lock_set_subsystem>())).Reply_lock_make_stable
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__lock_set_subsystem),
            "::",
            stringify!(Reply_lock_make_stable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__lock_set_subsystem>())).Reply_lock_handoff
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__lock_set_subsystem),
            "::",
            stringify!(Reply_lock_handoff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__lock_set_subsystem>())).Reply_lock_handoff_accept
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__lock_set_subsystem),
            "::",
            stringify!(Reply_lock_handoff_accept)
        )
    );
}
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_start_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_start_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_start_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_start_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__processor_start_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_start_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_start_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_exit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_exit_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_exit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_exit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__processor_exit_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_exit_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_exit_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__processor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__processor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__processor_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__processor_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_info_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_info_t>())).processor_info_outCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_info_t),
            "::",
            stringify!(processor_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[test]
fn bindgen_test_layout___Request__processor_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_control_t>(),
        116usize,
        concat!("Size of: ", stringify!(__Request__processor_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_control_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__processor_control_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_control_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_control_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_control_t>())).processor_cmdCnt as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_control_t),
            "::",
            stringify!(processor_cmdCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_control_t>())).processor_cmd as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_control_t),
            "::",
            stringify!(processor_cmd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__processor_assign_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_assign_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__processor_assign_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_assign_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__processor_assign_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_assign_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_assign_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_assign_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_assign_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_assign_t>())).new_set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_assign_t),
            "::",
            stringify!(new_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_assign_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_assign_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_assign_t>())).wait as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_assign_t),
            "::",
            stringify!(wait)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_get_assignment_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_get_assignment_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_get_assignment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_get_assignment_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_get_assignment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_get_assignment_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_get_assignment_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
    _bindgen_union_align: [u32; 29usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__processor_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__processor_subsystem>(),
        116usize,
        concat!("Size of: ", stringify!(__RequestUnion__processor_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__processor_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__processor_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_subsystem>())).Request_processor_start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_subsystem),
            "::",
            stringify!(Request_processor_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_subsystem>())).Request_processor_exit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_subsystem),
            "::",
            stringify!(Request_processor_exit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_subsystem>())).Request_processor_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_subsystem),
            "::",
            stringify!(Request_processor_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_subsystem>()))
                .Request_processor_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_subsystem),
            "::",
            stringify!(Request_processor_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_subsystem>())).Request_processor_assign
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_subsystem),
            "::",
            stringify!(Request_processor_assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_subsystem>()))
                .Request_processor_get_assignment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_subsystem),
            "::",
            stringify!(Request_processor_get_assignment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_start_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_start_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__processor_start_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_start_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_start_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_start_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_start_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_start_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_start_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_start_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_start_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_exit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_exit_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__processor_exit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_exit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_exit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_exit_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_exit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_exit_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_exit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_exit_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_exit_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[test]
fn bindgen_test_layout___Reply__processor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_info_t>(),
        132usize,
        concat!("Size of: ", stringify!(__Reply__processor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_info_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_info_t>())).host as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_info_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_info_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_info_t>())).processor_info_outCnt as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_info_t),
            "::",
            stringify!(processor_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_info_t>())).processor_info_out as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_info_t),
            "::",
            stringify!(processor_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_control_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__processor_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_control_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_control_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_control_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_control_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_control_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_control_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_assign_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_assign_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__processor_assign_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_assign_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_assign_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_assign_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_assign_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__processor_assign_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_assign_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_assign_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_assign_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_get_assignment_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_get_assignment_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__processor_get_assignment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_get_assignment_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_get_assignment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_get_assignment_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_get_assignment_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_get_assignment_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_get_assignment_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_get_assignment_t>())).assigned_set as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_get_assignment_t),
            "::",
            stringify!(assigned_set)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
    _bindgen_union_align: [u32; 33usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__processor_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__processor_subsystem>(),
        132usize,
        concat!("Size of: ", stringify!(__ReplyUnion__processor_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__processor_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__processor_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_subsystem>())).Reply_processor_start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_subsystem),
            "::",
            stringify!(Reply_processor_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_subsystem>())).Reply_processor_exit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_subsystem),
            "::",
            stringify!(Reply_processor_exit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_subsystem>())).Reply_processor_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_subsystem),
            "::",
            stringify!(Reply_processor_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_subsystem>())).Reply_processor_control
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_subsystem),
            "::",
            stringify!(Reply_processor_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_subsystem>())).Reply_processor_assign
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_subsystem),
            "::",
            stringify!(Reply_processor_assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_subsystem>()))
                .Reply_processor_get_assignment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_subsystem),
            "::",
            stringify!(Reply_processor_get_assignment)
        )
    );
}
extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_statistics_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_statistics_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_statistics_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_statistics_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_statistics_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_statistics_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_statistics_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_statistics_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_statistics_t>())).flavor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_statistics_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_statistics_t>())).info_outCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_statistics_t),
            "::",
            stringify!(info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_destroy_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_set_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_destroy_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_destroy_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_destroy_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_max_priority_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_max_priority_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_max_priority_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_max_priority_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_max_priority_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_max_priority_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_max_priority_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_max_priority_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_max_priority_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_max_priority_t>())).max_priority
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_max_priority_t),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_max_priority_t>())).change_threads
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_max_priority_t),
            "::",
            stringify!(change_threads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__processor_set_policy_enable_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_policy_enable_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_policy_enable_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_policy_enable_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_policy_enable_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_enable_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_enable_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_enable_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_enable_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_enable_t>())).policy as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_enable_t),
            "::",
            stringify!(policy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_policy_disable_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_policy_disable_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_policy_disable_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_policy_disable_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_policy_disable_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_disable_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_disable_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_disable_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_disable_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_disable_t>())).policy as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_disable_t),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_disable_t>())).change_threads
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_disable_t),
            "::",
            stringify!(change_threads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_tasks_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_tasks_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_set_tasks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_tasks_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_tasks_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_tasks_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_tasks_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_threads_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_threads_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_set_threads_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_threads_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_threads_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_threads_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_threads_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_policy_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_policy_control_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_policy_control_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_policy_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_policy_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_control_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_control_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_control_t>())).flavor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_control_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_control_t>())).policy_infoCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_control_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_control_t>())).policy_info
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_control_t),
            "::",
            stringify!(policy_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_policy_control_t>())).change as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_policy_control_t),
            "::",
            stringify!(change)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_stack_usage_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_stack_usage_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_stack_usage_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_stack_usage_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_stack_usage_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_stack_usage_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_stack_usage_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__processor_set_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__processor_set_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_info_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_info_t>())).info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_info_t),
            "::",
            stringify!(info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_tasks_with_flavor_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_tasks_with_flavor_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__processor_set_tasks_with_flavor_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_tasks_with_flavor_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_tasks_with_flavor_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_tasks_with_flavor_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_tasks_with_flavor_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_tasks_with_flavor_t>())).flavor
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(flavor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
    _bindgen_union_align: [u32; 16usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__processor_set_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__processor_set_subsystem>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__processor_set_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__processor_set_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__processor_set_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_statistics as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_statistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_destroy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_max_priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_max_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_policy_enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_policy_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_policy_disable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_policy_disable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_tasks as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_tasks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_threads as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_policy_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_policy_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_stack_usage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_stack_usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__processor_set_subsystem>()))
                .Request_processor_set_tasks_with_flavor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__processor_set_subsystem),
            "::",
            stringify!(Request_processor_set_tasks_with_flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[test]
fn bindgen_test_layout___Reply__processor_set_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_statistics_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_statistics_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_statistics_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_statistics_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_statistics_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_statistics_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_statistics_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_statistics_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_statistics_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_statistics_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_statistics_t>())).info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_statistics_t),
            "::",
            stringify!(info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_statistics_t>())).info_out as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_statistics_t),
            "::",
            stringify!(info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_destroy_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_destroy_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_destroy_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_destroy_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_max_priority_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_max_priority_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__processor_set_max_priority_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_max_priority_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_max_priority_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_max_priority_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_max_priority_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_max_priority_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_max_priority_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_max_priority_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_max_priority_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_policy_enable_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_policy_enable_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__processor_set_policy_enable_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_policy_enable_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_policy_enable_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_enable_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_enable_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_enable_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_enable_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_enable_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_enable_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_policy_disable_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_policy_disable_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__processor_set_policy_disable_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_policy_disable_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_policy_disable_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_disable_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_disable_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_disable_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_disable_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_disable_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_disable_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_tasks_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_tasks_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_tasks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_tasks_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_set_tasks_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_t>())).task_list as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_t),
            "::",
            stringify!(task_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_t>())).task_listCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_t),
            "::",
            stringify!(task_listCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_threads_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_threads_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_threads_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_threads_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_threads_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_threads_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_threads_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_threads_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_threads_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_threads_t>())).thread_list as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_threads_t),
            "::",
            stringify!(thread_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_threads_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_threads_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_threads_t>())).thread_listCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_threads_t),
            "::",
            stringify!(thread_listCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_policy_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_policy_control_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__processor_set_policy_control_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_policy_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_policy_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_control_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_control_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_policy_control_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_policy_control_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_stack_usage_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_stack_usage_t>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__processor_set_stack_usage_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_stack_usage_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_stack_usage_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).ltotal as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(ltotal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).space as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).resident as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(resident)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).maxusage as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(maxusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_stack_usage_t>())).maxstack as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_stack_usage_t),
            "::",
            stringify!(maxstack)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[test]
fn bindgen_test_layout___Reply__processor_set_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_info_t>(),
        72usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_set_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_info_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_info_t>())).host as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_info_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_info_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_info_t>())).info_outCnt as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_info_t),
            "::",
            stringify!(info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_info_t>())).info_out as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_info_t),
            "::",
            stringify!(info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_tasks_with_flavor_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_tasks_with_flavor_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_tasks_with_flavor_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_with_flavor_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_with_flavor_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_with_flavor_t>())).task_list
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(task_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_with_flavor_t>())).NDR as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_tasks_with_flavor_t>())).task_listCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_tasks_with_flavor_t),
            "::",
            stringify!(task_listCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
    _bindgen_union_align: [u32; 18usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__processor_set_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__processor_set_subsystem>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__ReplyUnion__processor_set_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__processor_set_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__processor_set_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_statistics as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_statistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_destroy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_max_priority as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_max_priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_policy_enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_policy_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_policy_disable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_policy_disable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_tasks as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_tasks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_threads as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_policy_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_policy_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_stack_usage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_stack_usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__processor_set_subsystem>()))
                .Reply_processor_set_tasks_with_flavor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__processor_set_subsystem),
            "::",
            stringify!(Reply_processor_set_tasks_with_flavor)
        )
    );
}
pub type sync_policy_t = ::std::os::raw::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(
        target_task: task_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_generate_corpse(task: task_t, corpse_task_port: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_create_suid_cred(
        task: task_t,
        path: *mut ::std::os::raw::c_char,
        uid: suid_cred_uid_t,
        delegation: *mut suid_cred_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_create_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__task_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_t>())).ledgers as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_t),
            "::",
            stringify!(ledgers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_create_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_t>())).ledgersCnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_t),
            "::",
            stringify!(ledgersCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_t>())).inherit_memory as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_t),
            "::",
            stringify!(inherit_memory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_terminate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_terminate_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_terminate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_terminate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_terminate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_terminate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_terminate_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_threads_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_threads_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_threads_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_threads_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_threads_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_threads_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_threads_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_ports_register_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_ports_register_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__mach_ports_register_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_ports_register_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_ports_register_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_ports_register_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_ports_register_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_ports_register_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_ports_register_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_ports_register_t>())).init_port_set as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_ports_register_t),
            "::",
            stringify!(init_port_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_ports_register_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_ports_register_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_ports_register_t>())).init_port_setCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_ports_register_t),
            "::",
            stringify!(init_port_setCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_ports_lookup_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_ports_lookup_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_ports_lookup_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_ports_lookup_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_ports_lookup_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_ports_lookup_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_ports_lookup_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__task_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__task_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_info_t>())).flavor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_info_t>())).task_info_outCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_info_t),
            "::",
            stringify!(task_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 87usize],
}
#[test]
fn bindgen_test_layout___Request__task_set_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_info_t>(),
        388usize,
        concat!("Size of: ", stringify!(__Request__task_set_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_set_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_set_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_set_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_info_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_info_t>())).task_info_inCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_info_t),
            "::",
            stringify!(task_info_inCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_info_t>())).task_info_in as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_info_t),
            "::",
            stringify!(task_info_in)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_suspend_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_suspend_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_suspend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_suspend_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_suspend_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_suspend_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_suspend_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_resume_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_resume_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_resume_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_resume_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_resume_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_resume_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_resume_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_get_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_special_port_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_get_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_special_port_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_special_port_t>())).which_port as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_special_port_t),
            "::",
            stringify!(which_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_set_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_special_port_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__task_set_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_special_port_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_special_port_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_special_port_t>())).special_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_special_port_t),
            "::",
            stringify!(special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_special_port_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_special_port_t>())).which_port as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_special_port_t),
            "::",
            stringify!(which_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_create_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_create_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Request__thread_create_running_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_create_running_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Request__thread_create_running_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_create_running_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_create_running_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_create_running_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_create_running_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_create_running_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_create_running_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_create_running_t>())).flavor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_create_running_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_create_running_t>())).new_stateCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_create_running_t),
            "::",
            stringify!(new_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_create_running_t>())).new_state as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_create_running_t),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__task_set_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_exception_ports_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_set_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).new_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(new_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).behavior as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exception_ports_t>())).new_flavor as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exception_ports_t),
            "::",
            stringify!(new_flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_exception_ports_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_get_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_exception_ports_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__task_swap_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_swap_exception_ports_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_swap_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_swap_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_swap_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).new_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(new_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).behavior as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_exception_ports_t>())).new_flavor
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_exception_ports_t),
            "::",
            stringify!(new_flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__lock_set_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_set_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__lock_set_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_set_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_set_create_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_create_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_create_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_create_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_create_t>())).n_ulocks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_create_t),
            "::",
            stringify!(n_ulocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_create_t>())).policy as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_create_t),
            "::",
            stringify!(policy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__lock_set_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__lock_set_destroy_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__lock_set_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__lock_set_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__lock_set_destroy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_destroy_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_destroy_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__lock_set_destroy_t>())).lock_set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__lock_set_destroy_t),
            "::",
            stringify!(lock_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__semaphore_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__semaphore_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__semaphore_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__semaphore_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__semaphore_create_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_create_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_create_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_create_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_create_t>())).policy as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_create_t),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_create_t>())).value as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_create_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__semaphore_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__semaphore_destroy_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__semaphore_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__semaphore_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__semaphore_destroy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_destroy_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_destroy_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__semaphore_destroy_t>())).semaphore as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__semaphore_destroy_t),
            "::",
            stringify!(semaphore)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[test]
fn bindgen_test_layout___Request__task_policy_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_policy_set_t>(),
        104usize,
        concat!("Size of: ", stringify!(__Request__task_policy_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_policy_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_policy_set_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_set_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_set_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_set_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_set_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_set_t>())).policy_infoCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_set_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_set_t>())).policy_info as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_set_t),
            "::",
            stringify!(policy_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_policy_get_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_policy_get_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__task_policy_get_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_policy_get_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_policy_get_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_get_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_get_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_get_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_get_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_get_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_get_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_get_t>())).policy_infoCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_get_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_get_t>())).get_default as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_get_t),
            "::",
            stringify!(get_default)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__task_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_sample_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__task_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_sample_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_sample_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_sample_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_sample_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_sample_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_sample_t>())).reply as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_sample_t),
            "::",
            stringify!(reply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_policy_t>(),
        68usize,
        concat!("Size of: ", stringify!(__Request__task_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_policy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_policy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_policy_t>())).policy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_t>())).baseCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(baseCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_policy_t>())).base as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_policy_t>())).set_limit as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(set_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_policy_t>())).change as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_policy_t),
            "::",
            stringify!(change)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_set_emulation_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_emulation_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__task_set_emulation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_emulation_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_set_emulation_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_t>())).routine_entry_pt as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_t),
            "::",
            stringify!(routine_entry_pt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_t>())).routine_number as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_t),
            "::",
            stringify!(routine_number)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_emulation_vector_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_emulation_vector_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_get_emulation_vector_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_emulation_vector_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_emulation_vector_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_emulation_vector_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_emulation_vector_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__task_set_emulation_vector_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_emulation_vector_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_set_emulation_vector_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_emulation_vector_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_emulation_vector_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_vector_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_vector_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_vector_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_vector_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_vector_t>())).emulation_vector
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_vector_t),
            "::",
            stringify!(emulation_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_vector_t>())).NDR as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_vector_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_vector_t>())).vector_start
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_vector_t),
            "::",
            stringify!(vector_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_emulation_vector_t>())).emulation_vectorCnt
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_emulation_vector_t),
            "::",
            stringify!(emulation_vectorCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__task_set_ras_pc_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_ras_pc_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__task_set_ras_pc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_ras_pc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_set_ras_pc_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_ras_pc_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_ras_pc_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_ras_pc_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_ras_pc_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_ras_pc_t>())).basepc as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_ras_pc_t),
            "::",
            stringify!(basepc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_ras_pc_t>())).boundspc as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_ras_pc_t),
            "::",
            stringify!(boundspc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_zone_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_zone_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_zone_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_zone_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_zone_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_zone_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_zone_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_assign_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_assign_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__task_assign_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_assign_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_assign_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_assign_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_assign_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_assign_t>())).new_set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_t),
            "::",
            stringify!(new_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_assign_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_assign_t>())).assign_threads as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_t),
            "::",
            stringify!(assign_threads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_assign_default_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_assign_default_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_assign_default_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_assign_default_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_assign_default_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_assign_default_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_default_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_assign_default_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_default_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_assign_default_t>())).assign_threads as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_assign_default_t),
            "::",
            stringify!(assign_threads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_assignment_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_assignment_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_get_assignment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_assignment_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_assignment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_assignment_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_assignment_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_set_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_policy_t>(),
        88usize,
        concat!("Size of: ", stringify!(__Request__task_set_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_set_policy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).pset as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(pset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).policy as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).baseCnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(baseCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).base as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).limitCnt as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(limitCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).limit as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_policy_t>())).change as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_policy_t),
            "::",
            stringify!(change)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_state_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__task_get_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_get_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_get_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_state_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_state_t>())).old_stateCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Request__task_set_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_state_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Request__task_set_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_set_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_set_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_state_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_state_t>())).new_stateCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_state_t),
            "::",
            stringify!(new_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_state_t>())).new_state as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_state_t),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_set_phys_footprint_limit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_phys_footprint_limit_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_set_phys_footprint_limit_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_phys_footprint_limit_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_phys_footprint_limit_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_phys_footprint_limit_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_phys_footprint_limit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_phys_footprint_limit_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_phys_footprint_limit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_phys_footprint_limit_t>())).new_limit
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_phys_footprint_limit_t),
            "::",
            stringify!(new_limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_suspend2_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_suspend2_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_suspend2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_suspend2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_suspend2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_suspend2_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_suspend2_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_resume2_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_resume2_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_resume2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_resume2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_resume2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_resume2_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_resume2_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_purgable_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_purgable_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_purgable_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_purgable_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_purgable_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_purgable_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_purgable_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_mach_voucher_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_get_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_mach_voucher_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_mach_voucher_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_mach_voucher_t>())).which as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_mach_voucher_t),
            "::",
            stringify!(which)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__task_set_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_mach_voucher_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__task_set_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_mach_voucher_t>())).voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_mach_voucher_t),
            "::",
            stringify!(voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__task_swap_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_swap_mach_voucher_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__task_swap_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_swap_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_swap_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_mach_voucher_t>())).new_voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_mach_voucher_t),
            "::",
            stringify!(new_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_swap_mach_voucher_t>())).old_voucher as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_swap_mach_voucher_t),
            "::",
            stringify!(old_voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_generate_corpse_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_generate_corpse_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__task_generate_corpse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_generate_corpse_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_generate_corpse_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_generate_corpse_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_generate_corpse_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__task_map_corpse_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_map_corpse_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__task_map_corpse_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_map_corpse_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_map_corpse_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_map_corpse_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_map_corpse_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_map_corpse_info_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_map_corpse_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_map_corpse_info_t>())).corspe_task as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_map_corpse_info_t),
            "::",
            stringify!(corspe_task)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__task_register_dyld_image_infos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_register_dyld_image_infos_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_register_dyld_image_infos_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_register_dyld_image_infos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_register_dyld_image_infos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_image_infos_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_image_infos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_image_infos_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_image_infos_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_image_infos_t>())).dyld_images
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_image_infos_t),
            "::",
            stringify!(dyld_images)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_image_infos_t>())).NDR as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_image_infos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_image_infos_t>())).dyld_imagesCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_image_infos_t),
            "::",
            stringify!(dyld_imagesCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__task_unregister_dyld_image_infos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_unregister_dyld_image_infos_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_unregister_dyld_image_infos_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_unregister_dyld_image_infos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_unregister_dyld_image_infos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_unregister_dyld_image_infos_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_unregister_dyld_image_infos_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_unregister_dyld_image_infos_t>())).dyld_images
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(dyld_images)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_unregister_dyld_image_infos_t>())).NDR
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_unregister_dyld_image_infos_t>())).dyld_imagesCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(dyld_imagesCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_dyld_image_infos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_dyld_image_infos_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_get_dyld_image_infos_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_dyld_image_infos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_dyld_image_infos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_dyld_image_infos_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_dyld_image_infos_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_register_dyld_shared_cache_image_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_register_dyld_shared_cache_image_info_t>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_register_dyld_shared_cache_image_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_shared_cache_image_info_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_shared_cache_image_info_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_shared_cache_image_info_t>()))
                .dyld_cache_image as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(dyld_cache_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_shared_cache_image_info_t>()))
                .no_cache as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(no_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_shared_cache_image_info_t>()))
                .private_cache as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(private_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout___Request__task_register_dyld_set_dyld_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_register_dyld_set_dyld_state_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_register_dyld_set_dyld_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_register_dyld_set_dyld_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_register_dyld_set_dyld_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_set_dyld_state_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_set_dyld_state_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_set_dyld_state_t>())).dyld_state
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(dyld_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_set_dyld_state_t>())).dyld_statePad
                as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(dyld_statePad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_register_dyld_get_process_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_register_dyld_get_process_state_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_register_dyld_get_process_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_register_dyld_get_process_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_register_dyld_get_process_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_register_dyld_get_process_state_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_register_dyld_get_process_state_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__task_map_corpse_info_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_map_corpse_info_64_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_map_corpse_info_64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_map_corpse_info_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_map_corpse_info_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_map_corpse_info_64_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_map_corpse_info_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_map_corpse_info_64_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_map_corpse_info_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_map_corpse_info_64_t>())).corspe_task as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_map_corpse_info_64_t),
            "::",
            stringify!(corspe_task)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__task_inspect_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_inspect_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__task_inspect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_inspect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_inspect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_inspect_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_inspect_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_inspect_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_inspect_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_inspect_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_inspect_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_inspect_t>())).info_outCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_inspect_t),
            "::",
            stringify!(info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__task_get_exc_guard_behavior_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_get_exc_guard_behavior_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_get_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_get_exc_guard_behavior_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_get_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_get_exc_guard_behavior_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_get_exc_guard_behavior_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[test]
fn bindgen_test_layout___Request__task_set_exc_guard_behavior_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_exc_guard_behavior_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__task_set_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_exc_guard_behavior_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exc_guard_behavior_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exc_guard_behavior_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exc_guard_behavior_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exc_guard_behavior_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_exc_guard_behavior_t>())).behavior
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_exc_guard_behavior_t),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__task_create_suid_cred_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub pathOffset: mach_msg_type_number_t,
    pub pathCnt: mach_msg_type_number_t,
    pub path: [::std::os::raw::c_char; 1024usize],
    pub uid: suid_cred_uid_t,
}
#[test]
fn bindgen_test_layout___Request__task_create_suid_cred_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_create_suid_cred_t>(),
        1068usize,
        concat!("Size of: ", stringify!(__Request__task_create_suid_cred_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_create_suid_cred_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_create_suid_cred_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_suid_cred_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_suid_cred_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_suid_cred_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_suid_cred_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_suid_cred_t>())).pathOffset as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_suid_cred_t),
            "::",
            stringify!(pathOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_suid_cred_t>())).pathCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_suid_cred_t),
            "::",
            stringify!(pathCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_suid_cred_t>())).path as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_suid_cred_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_create_suid_cred_t>())).uid as *const _ as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_create_suid_cred_t),
            "::",
            stringify!(uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_create_suid_cred: __Request__task_create_suid_cred_t,
    _bindgen_union_align: [u32; 1306usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__task_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__task_subsystem>(),
        5224usize,
        concat!("Size of: ", stringify!(__RequestUnion__task_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__task_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__RequestUnion__task_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_terminate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_terminate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_threads
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_mach_ports_register
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_mach_ports_register)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_mach_ports_lookup
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_mach_ports_lookup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_suspend
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_suspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_resume
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_resume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_get_special_port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_special_port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_thread_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_thread_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_thread_create_running
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_thread_create_running)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_set_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_get_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_swap_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_swap_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_lock_set_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_lock_set_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_lock_set_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_lock_set_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_semaphore_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_semaphore_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_semaphore_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_semaphore_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_policy_set
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_policy_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_policy_get
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_policy_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_sample
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_policy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_emulation
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_emulation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_get_emulation_vector as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_emulation_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_set_emulation_vector as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_emulation_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_ras_pc
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_ras_pc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_zone_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_zone_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_assign
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_assign_default
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_assign_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_get_assignment
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_assignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_policy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_get_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_set_phys_footprint_limit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_phys_footprint_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_suspend2
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_suspend2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_resume2
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_resume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_purgable_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_purgable_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_get_mach_voucher
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_set_mach_voucher
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_swap_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_swap_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_generate_corpse
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_generate_corpse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_map_corpse_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_map_corpse_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_register_dyld_image_infos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_register_dyld_image_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_unregister_dyld_image_infos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_unregister_dyld_image_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_get_dyld_image_infos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_dyld_image_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_register_dyld_shared_cache_image_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_register_dyld_shared_cache_image_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_register_dyld_set_dyld_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_register_dyld_set_dyld_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_register_dyld_get_process_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_register_dyld_get_process_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_map_corpse_info_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_map_corpse_info_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_inspect
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_inspect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_get_exc_guard_behavior as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_get_exc_guard_behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>()))
                .Request_task_set_exc_guard_behavior as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_set_exc_guard_behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__task_subsystem>())).Request_task_create_suid_cred
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__task_subsystem),
            "::",
            stringify!(Request_task_create_suid_cred)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_create_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_create_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_create_t>())).child_task as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_create_t),
            "::",
            stringify!(child_task)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_terminate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_terminate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_terminate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_terminate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_terminate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_terminate_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_terminate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_terminate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_terminate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_terminate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_terminate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__task_threads_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_threads_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__task_threads_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_threads_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_threads_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_threads_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_threads_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_threads_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_threads_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_threads_t>())).act_list as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_threads_t),
            "::",
            stringify!(act_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_threads_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_threads_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_threads_t>())).act_listCnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_threads_t),
            "::",
            stringify!(act_listCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_ports_register_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_ports_register_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_ports_register_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_ports_register_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_ports_register_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_register_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_register_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_register_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_register_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_register_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_register_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_ports_lookup_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_ports_lookup_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__mach_ports_lookup_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_ports_lookup_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_ports_lookup_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_lookup_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_lookup_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_lookup_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_lookup_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_lookup_t>())).init_port_set as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_lookup_t),
            "::",
            stringify!(init_port_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_lookup_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_lookup_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_ports_lookup_t>())).init_port_setCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_ports_lookup_t),
            "::",
            stringify!(init_port_setCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 87usize],
}
#[test]
fn bindgen_test_layout___Reply__task_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_info_t>(),
        388usize,
        concat!("Size of: ", stringify!(__Reply__task_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_info_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_info_t>())).task_info_outCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_info_t),
            "::",
            stringify!(task_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_info_t>())).task_info_out as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_info_t),
            "::",
            stringify!(task_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_info_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_info_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_info_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_suspend_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_suspend_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_suspend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_suspend_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_suspend_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_suspend_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_suspend_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_suspend_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_suspend_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_suspend_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_suspend_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_resume_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_resume_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_resume_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_resume_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_resume_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_resume_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_resume_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_resume_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_resume_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_resume_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_resume_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_get_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_special_port_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_get_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_get_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_special_port_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_special_port_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_special_port_t>())).special_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_special_port_t),
            "::",
            stringify!(special_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_special_port_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_set_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_special_port_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_special_port_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_special_port_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__thread_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_create_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_create_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_create_t>())).child_act as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_create_t),
            "::",
            stringify!(child_act)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_create_running_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_create_running_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__thread_create_running_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_create_running_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_create_running_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_create_running_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_create_running_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_create_running_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_create_running_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_create_running_t>())).child_act as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_create_running_t),
            "::",
            stringify!(child_act)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_exception_ports_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_exception_ports_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_set_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_exception_ports_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_exception_ports_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_exception_ports_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__task_get_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_exception_ports_t>(),
        808usize,
        concat!("Size of: ", stringify!(__Reply__task_get_exception_ports_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_get_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).old_handlers as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(old_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).NDR as *const _ as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).masksCnt as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(masksCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).masks as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).old_behaviors
                as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(old_behaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exception_ports_t>())).old_flavors as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exception_ports_t),
            "::",
            stringify!(old_flavors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__task_swap_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_swap_exception_ports_t>(),
        808usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_swap_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_swap_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_swap_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).old_handlerss
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(old_handlerss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).NDR as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).masksCnt as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(masksCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).masks as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).old_behaviors
                as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(old_behaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_exception_ports_t>())).old_flavors as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_exception_ports_t),
            "::",
            stringify!(old_flavors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_set_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_set_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__lock_set_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_set_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_set_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_set_create_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_set_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_set_create_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_set_create_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_set_create_t>())).new_lock_set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_set_create_t),
            "::",
            stringify!(new_lock_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__lock_set_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__lock_set_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__lock_set_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__lock_set_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__lock_set_destroy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_set_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_set_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__lock_set_destroy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_set_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__lock_set_destroy_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__lock_set_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__semaphore_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__semaphore_create_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__semaphore_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__semaphore_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__semaphore_create_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__semaphore_create_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__semaphore_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__semaphore_create_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__semaphore_create_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__semaphore_create_t>())).semaphore as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__semaphore_create_t),
            "::",
            stringify!(semaphore)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__semaphore_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__semaphore_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__semaphore_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__semaphore_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__semaphore_destroy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__semaphore_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__semaphore_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__semaphore_destroy_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__semaphore_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__semaphore_destroy_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__semaphore_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_policy_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_policy_set_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_policy_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_policy_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_policy_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_set_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_set_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_policy_set_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_set_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[test]
fn bindgen_test_layout___Reply__task_policy_get_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_policy_get_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__task_policy_get_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_policy_get_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_policy_get_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_get_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_get_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_get_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_get_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_policy_get_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_get_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_policy_get_t>())).policy_infoCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_get_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_policy_get_t>())).policy_info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_get_t),
            "::",
            stringify!(policy_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_policy_get_t>())).get_default as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_get_t),
            "::",
            stringify!(get_default)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_sample_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_sample_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_sample_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_sample_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_sample_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_sample_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_sample_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_sample_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_policy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_policy_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_policy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_emulation_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_emulation_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_emulation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_emulation_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_emulation_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_emulation_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_emulation_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_emulation_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_emulation_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_emulation_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_emulation_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__task_get_emulation_vector_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_emulation_vector_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_get_emulation_vector_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_emulation_vector_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_get_emulation_vector_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_emulation_vector_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_emulation_vector_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_emulation_vector_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_emulation_vector_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_emulation_vector_t>())).emulation_vector
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_emulation_vector_t),
            "::",
            stringify!(emulation_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_emulation_vector_t>())).NDR as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_emulation_vector_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_emulation_vector_t>())).vector_start
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_emulation_vector_t),
            "::",
            stringify!(vector_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_emulation_vector_t>())).emulation_vectorCnt
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_emulation_vector_t),
            "::",
            stringify!(emulation_vectorCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_emulation_vector_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_emulation_vector_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_set_emulation_vector_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_emulation_vector_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_set_emulation_vector_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_emulation_vector_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_emulation_vector_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_emulation_vector_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_emulation_vector_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_emulation_vector_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_emulation_vector_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_ras_pc_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_ras_pc_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_ras_pc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_ras_pc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_ras_pc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_ras_pc_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_ras_pc_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_ras_pc_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_ras_pc_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_ras_pc_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_ras_pc_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__task_zone_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_zone_info_t>(),
        76usize,
        concat!("Size of: ", stringify!(__Reply__task_zone_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_zone_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_zone_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).names as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).info as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).NDR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).namesCnt as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(namesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_zone_info_t>())).infoCnt as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_zone_info_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_assign_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_assign_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_assign_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_assign_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_assign_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_assign_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_assign_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_assign_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_assign_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_assign_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_assign_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_assign_default_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_assign_default_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_assign_default_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_assign_default_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_assign_default_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_assign_default_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_assign_default_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_assign_default_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_assign_default_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_assign_default_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_assign_default_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_get_assignment_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_assignment_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_get_assignment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_assignment_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_get_assignment_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_assignment_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_assignment_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_assignment_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_assignment_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_assignment_t>())).assigned_set as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_assignment_t),
            "::",
            stringify!(assigned_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_policy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_policy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_policy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_policy_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_policy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Reply__task_get_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_state_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Reply__task_get_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_get_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_get_state_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_get_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_state_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_state_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_state_t>())).old_stateCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_state_t>())).old_state as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_state_t),
            "::",
            stringify!(old_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_state_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_state_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_set_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_state_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_state_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Reply__task_set_phys_footprint_limit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_phys_footprint_limit_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_set_phys_footprint_limit_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_phys_footprint_limit_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_set_phys_footprint_limit_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_phys_footprint_limit_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_phys_footprint_limit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_phys_footprint_limit_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_phys_footprint_limit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_phys_footprint_limit_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_phys_footprint_limit_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_phys_footprint_limit_t>())).old_limit
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_phys_footprint_limit_t),
            "::",
            stringify!(old_limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_suspend2_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_suspend2_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_suspend2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_suspend2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_suspend2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_suspend2_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_suspend2_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_suspend2_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_suspend2_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_suspend2_t>())).suspend_token as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_suspend2_t),
            "::",
            stringify!(suspend_token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_resume2_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_resume2_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_resume2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_resume2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_resume2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_resume2_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_resume2_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_resume2_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_resume2_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_resume2_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_resume2_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[test]
fn bindgen_test_layout___Reply__task_purgable_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_purgable_info_t>(),
        308usize,
        concat!("Size of: ", stringify!(__Reply__task_purgable_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_purgable_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_purgable_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_purgable_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_purgable_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_purgable_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_purgable_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_purgable_info_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_purgable_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_purgable_info_t>())).stats as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_purgable_info_t),
            "::",
            stringify!(stats)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_get_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_mach_voucher_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_get_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_get_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_mach_voucher_t>())).voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_mach_voucher_t),
            "::",
            stringify!(voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_mach_voucher_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_set_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_mach_voucher_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_mach_voucher_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_mach_voucher_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_mach_voucher_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_swap_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_swap_mach_voucher_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_swap_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_swap_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_swap_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_swap_mach_voucher_t>())).old_voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_swap_mach_voucher_t),
            "::",
            stringify!(old_voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_generate_corpse_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_generate_corpse_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_generate_corpse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_generate_corpse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_generate_corpse_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_generate_corpse_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_generate_corpse_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_generate_corpse_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_generate_corpse_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_generate_corpse_t>())).corpse_task_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_generate_corpse_t),
            "::",
            stringify!(corpse_task_port)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[test]
fn bindgen_test_layout___Reply__task_map_corpse_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_map_corpse_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__task_map_corpse_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_map_corpse_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_map_corpse_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_t>())).kcd_addr_begin as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_t),
            "::",
            stringify!(kcd_addr_begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_t>())).kcd_size as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_t),
            "::",
            stringify!(kcd_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_register_dyld_image_infos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_register_dyld_image_infos_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_register_dyld_image_infos_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_register_dyld_image_infos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_register_dyld_image_infos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_image_infos_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_image_infos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_image_infos_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_image_infos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_image_infos_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_image_infos_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_unregister_dyld_image_infos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_unregister_dyld_image_infos_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_unregister_dyld_image_infos_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_unregister_dyld_image_infos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_unregister_dyld_image_infos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_unregister_dyld_image_infos_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_unregister_dyld_image_infos_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_unregister_dyld_image_infos_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_unregister_dyld_image_infos_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__task_get_dyld_image_infos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_dyld_image_infos_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_get_dyld_image_infos_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_dyld_image_infos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_get_dyld_image_infos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_dyld_image_infos_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_dyld_image_infos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_dyld_image_infos_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_dyld_image_infos_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_dyld_image_infos_t>())).dyld_images as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_dyld_image_infos_t),
            "::",
            stringify!(dyld_images)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_dyld_image_infos_t>())).NDR as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_dyld_image_infos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_dyld_image_infos_t>())).dyld_imagesCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_dyld_image_infos_t),
            "::",
            stringify!(dyld_imagesCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_register_dyld_shared_cache_image_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_register_dyld_shared_cache_image_info_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_register_dyld_shared_cache_image_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_register_dyld_shared_cache_image_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_register_dyld_shared_cache_image_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_shared_cache_image_info_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_shared_cache_image_info_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_shared_cache_image_info_t>()))
                .RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_shared_cache_image_info_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_register_dyld_set_dyld_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_register_dyld_set_dyld_state_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_register_dyld_set_dyld_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_register_dyld_set_dyld_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_register_dyld_set_dyld_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_set_dyld_state_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_set_dyld_state_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_set_dyld_state_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_set_dyld_state_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[test]
fn bindgen_test_layout___Reply__task_register_dyld_get_process_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_register_dyld_get_process_state_t>(),
        108usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_register_dyld_get_process_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_register_dyld_get_process_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_register_dyld_get_process_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_get_process_state_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_get_process_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_get_process_state_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_get_process_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_get_process_state_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_get_process_state_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_register_dyld_get_process_state_t>()))
                .dyld_process_state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_register_dyld_get_process_state_t),
            "::",
            stringify!(dyld_process_state)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout___Reply__task_map_corpse_info_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_map_corpse_info_64_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Reply__task_map_corpse_info_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_map_corpse_info_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_map_corpse_info_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_64_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_64_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_64_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_64_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_64_t>())).kcd_addr_begin
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_64_t),
            "::",
            stringify!(kcd_addr_begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_map_corpse_info_64_t>())).kcd_size as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_map_corpse_info_64_t),
            "::",
            stringify!(kcd_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[test]
fn bindgen_test_layout___Reply__task_inspect_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_inspect_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__task_inspect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_inspect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_inspect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_inspect_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_inspect_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_inspect_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_inspect_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_inspect_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_inspect_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_inspect_t>())).info_outCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_inspect_t),
            "::",
            stringify!(info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_inspect_t>())).info_out as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_inspect_t),
            "::",
            stringify!(info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[test]
fn bindgen_test_layout___Reply__task_get_exc_guard_behavior_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_get_exc_guard_behavior_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_get_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_get_exc_guard_behavior_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_get_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exc_guard_behavior_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exc_guard_behavior_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exc_guard_behavior_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exc_guard_behavior_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exc_guard_behavior_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exc_guard_behavior_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_get_exc_guard_behavior_t>())).behavior as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_get_exc_guard_behavior_t),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_exc_guard_behavior_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_exc_guard_behavior_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__task_set_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_exc_guard_behavior_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_set_exc_guard_behavior_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_exc_guard_behavior_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_exc_guard_behavior_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_exc_guard_behavior_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_exc_guard_behavior_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_exc_guard_behavior_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_exc_guard_behavior_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_suid_cred_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub delegation: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__task_create_suid_cred_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_create_suid_cred_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__task_create_suid_cred_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_create_suid_cred_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__task_create_suid_cred_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_create_suid_cred_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_create_suid_cred_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_create_suid_cred_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_create_suid_cred_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_create_suid_cred_t>())).delegation as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_create_suid_cred_t),
            "::",
            stringify!(delegation)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_create_suid_cred: __Reply__task_create_suid_cred_t,
    _bindgen_union_align: [u32; 1306usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__task_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__task_subsystem>(),
        5224usize,
        concat!("Size of: ", stringify!(__ReplyUnion__task_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__task_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__ReplyUnion__task_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_create as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_terminate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_terminate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_threads as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_mach_ports_register
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_mach_ports_register)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_mach_ports_lookup
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_mach_ports_lookup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_suspend as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_suspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_resume as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_resume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_special_port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_special_port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_thread_create as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_thread_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_thread_create_running
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_thread_create_running)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_exception_ports
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_exception_ports
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_swap_exception_ports
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_swap_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_lock_set_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_lock_set_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_lock_set_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_lock_set_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_semaphore_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_semaphore_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_semaphore_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_semaphore_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_policy_set
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_policy_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_policy_get
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_policy_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_sample as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_policy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_emulation
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_emulation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_emulation_vector
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_emulation_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_emulation_vector
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_emulation_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_ras_pc
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_ras_pc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_zone_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_zone_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_assign as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_assign_default
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_assign_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_assignment
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_assignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_policy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_set_phys_footprint_limit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_phys_footprint_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_suspend2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_suspend2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_resume2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_resume2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_purgable_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_purgable_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_mach_voucher
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_set_mach_voucher
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_swap_mach_voucher
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_swap_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_generate_corpse
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_generate_corpse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_map_corpse_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_map_corpse_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_register_dyld_image_infos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_register_dyld_image_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_unregister_dyld_image_infos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_unregister_dyld_image_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_get_dyld_image_infos
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_dyld_image_infos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_register_dyld_shared_cache_image_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_register_dyld_shared_cache_image_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_register_dyld_set_dyld_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_register_dyld_set_dyld_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_register_dyld_get_process_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_register_dyld_get_process_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_map_corpse_info_64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_map_corpse_info_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_inspect as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_inspect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_get_exc_guard_behavior as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_get_exc_guard_behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>()))
                .Reply_task_set_exc_guard_behavior as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_set_exc_guard_behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__task_subsystem>())).Reply_task_create_suid_cred
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__task_subsystem),
            "::",
            stringify!(Reply_task_create_suid_cred)
        )
    );
}
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_terminate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_terminate_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_terminate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_terminate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_terminate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_terminate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_terminate_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__act_get_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__act_get_state_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__act_get_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__act_get_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__act_get_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__act_get_state_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_get_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__act_get_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_get_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__act_get_state_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_get_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__act_get_state_t>())).old_stateCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_get_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Request__act_set_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__act_set_state_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Request__act_set_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__act_set_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__act_set_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__act_set_state_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_set_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__act_set_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_set_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__act_set_state_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_set_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__act_set_state_t>())).new_stateCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_set_state_t),
            "::",
            stringify!(new_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__act_set_state_t>())).new_state as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__act_set_state_t),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__thread_get_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_get_state_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__thread_get_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_get_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_get_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_state_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_state_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_state_t>())).old_stateCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Request__thread_set_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_set_state_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Request__thread_set_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_set_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_set_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_state_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_state_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_state_t>())).new_stateCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_state_t),
            "::",
            stringify!(new_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_state_t>())).new_state as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_state_t),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_suspend_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_suspend_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_suspend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_suspend_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_suspend_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_suspend_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_suspend_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_resume_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_resume_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_resume_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_resume_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_resume_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_resume_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_resume_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_abort_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_abort_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_abort_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_abort_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_abort_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_abort_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_abort_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_abort_safely_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_abort_safely_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_abort_safely_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_abort_safely_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_abort_safely_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_abort_safely_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_abort_safely_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_depress_abort_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_depress_abort_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_depress_abort_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_depress_abort_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_depress_abort_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_depress_abort_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_depress_abort_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__thread_get_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_get_special_port_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_get_special_port_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_get_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_get_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_special_port_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_special_port_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_special_port_t>())).which_port as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_special_port_t),
            "::",
            stringify!(which_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__thread_set_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_set_special_port_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_set_special_port_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_set_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_set_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_special_port_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_special_port_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_special_port_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_special_port_t>())).special_port
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_special_port_t),
            "::",
            stringify!(special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_special_port_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_special_port_t>())).which_port as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_special_port_t),
            "::",
            stringify!(which_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__thread_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__thread_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_info_t>())).flavor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_info_t>())).thread_info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_info_t),
            "::",
            stringify!(thread_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__thread_set_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_set_exception_ports_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_set_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_set_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_set_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).new_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(new_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).behavior as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_exception_ports_t>())).new_flavor
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_exception_ports_t),
            "::",
            stringify!(new_flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[test]
fn bindgen_test_layout___Request__thread_get_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_get_exception_ports_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_get_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_get_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_get_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_exception_ports_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__thread_swap_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_swap_exception_ports_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_swap_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_swap_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_swap_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).new_port
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(new_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).exception_mask
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(exception_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).behavior
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_exception_ports_t>())).new_flavor
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_exception_ports_t),
            "::",
            stringify!(new_flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__thread_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_policy_t>(),
        64usize,
        concat!("Size of: ", stringify!(__Request__thread_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_policy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_policy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_t>())).policy as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_t),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_t>())).baseCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_t),
            "::",
            stringify!(baseCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_policy_t>())).base as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_t>())).set_limit as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_t),
            "::",
            stringify!(set_limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[test]
fn bindgen_test_layout___Request__thread_policy_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_policy_set_t>(),
        104usize,
        concat!("Size of: ", stringify!(__Request__thread_policy_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_policy_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_policy_set_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_set_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_set_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_set_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_set_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_set_t>())).policy_infoCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_set_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_set_t>())).policy_info as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_set_t),
            "::",
            stringify!(policy_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__thread_policy_get_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_policy_get_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__thread_policy_get_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_policy_get_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_policy_get_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_get_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_get_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_get_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_get_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_get_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_get_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_get_t>())).policy_infoCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_get_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_policy_get_t>())).get_default as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_policy_get_t),
            "::",
            stringify!(get_default)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__thread_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_sample_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__thread_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_sample_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_sample_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_sample_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_sample_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_sample_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_sample_t>())).reply as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_sample_t),
            "::",
            stringify!(reply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__etap_trace_thread_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__etap_trace_thread_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__etap_trace_thread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__etap_trace_thread_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__etap_trace_thread_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__etap_trace_thread_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__etap_trace_thread_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__etap_trace_thread_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__etap_trace_thread_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__etap_trace_thread_t>())).trace_status as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__etap_trace_thread_t),
            "::",
            stringify!(trace_status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__thread_assign_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_assign_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__thread_assign_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_assign_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_assign_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__thread_assign_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_assign_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_assign_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_assign_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_assign_t>())).new_set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_assign_t),
            "::",
            stringify!(new_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_assign_default_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_assign_default_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_assign_default_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_assign_default_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_assign_default_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_assign_default_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_assign_default_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__thread_get_assignment_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_get_assignment_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__thread_get_assignment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_get_assignment_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_get_assignment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_assignment_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_assignment_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[test]
fn bindgen_test_layout___Request__thread_set_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_set_policy_t>(),
        84usize,
        concat!("Size of: ", stringify!(__Request__thread_set_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_set_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__thread_set_policy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).pset as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(pset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).policy as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).baseCnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(baseCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).base as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).limitCnt as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(limitCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_policy_t>())).limit as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_policy_t),
            "::",
            stringify!(limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[test]
fn bindgen_test_layout___Request__thread_get_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_get_mach_voucher_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_get_mach_voucher_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_get_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_get_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_mach_voucher_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_mach_voucher_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_get_mach_voucher_t>())).which as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_get_mach_voucher_t),
            "::",
            stringify!(which)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__thread_set_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_set_mach_voucher_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_set_mach_voucher_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_set_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_set_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_set_mach_voucher_t>())).voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_set_mach_voucher_t),
            "::",
            stringify!(voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Request__thread_swap_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_swap_mach_voucher_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_swap_mach_voucher_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_swap_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_swap_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_mach_voucher_t>())).new_voucher
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_mach_voucher_t),
            "::",
            stringify!(new_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_swap_mach_voucher_t>())).old_voucher
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_swap_mach_voucher_t),
            "::",
            stringify!(old_voucher)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__thread_convert_thread_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__thread_convert_thread_state_t>(),
        5232usize,
        concat!(
            "Size of: ",
            stringify!(__Request__thread_convert_thread_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__thread_convert_thread_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__thread_convert_thread_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).direction
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).flavor as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).in_stateCnt
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(in_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).in_state
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(in_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__thread_convert_thread_state_t>())).out_stateCnt
                as *const _ as usize
        },
        5228usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__thread_convert_thread_state_t),
            "::",
            stringify!(out_stateCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    _bindgen_union_align: [u32; 1308usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__thread_act_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__thread_act_subsystem>(),
        5232usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__thread_act_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__thread_act_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__thread_act_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_terminate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_terminate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_act_get_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_act_get_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_act_set_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_act_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_get_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_get_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_set_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_suspend
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_suspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_resume
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_resume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_abort
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_abort_safely as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_abort_safely)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_depress_abort as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_depress_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_get_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_get_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_set_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_set_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_set_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_set_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_get_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_get_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_swap_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_swap_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_policy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_policy_set as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_policy_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_policy_get as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_policy_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_sample
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_etap_trace_thread as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_etap_trace_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>())).Request_thread_assign
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_assign_default as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_assign_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_get_assignment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_get_assignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_set_policy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_set_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_get_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_get_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_set_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_set_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_swap_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_swap_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__thread_act_subsystem>()))
                .Request_thread_convert_thread_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__thread_act_subsystem),
            "::",
            stringify!(Request_thread_convert_thread_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_terminate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_terminate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_terminate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_terminate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_terminate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_terminate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_terminate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_terminate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_terminate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_terminate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_terminate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Reply__act_get_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__act_get_state_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Reply__act_get_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__act_get_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__act_get_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__act_get_state_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_get_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__act_get_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_get_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__act_get_state_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_get_state_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__act_get_state_t>())).old_stateCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_get_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__act_get_state_t>())).old_state as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_get_state_t),
            "::",
            stringify!(old_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__act_set_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__act_set_state_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__act_set_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__act_set_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__act_set_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__act_set_state_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_set_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__act_set_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_set_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__act_set_state_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__act_set_state_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Reply__thread_get_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_get_state_t>(),
        5224usize,
        concat!("Size of: ", stringify!(__Reply__thread_get_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_get_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_get_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_get_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_state_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_state_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_state_t>())).old_stateCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_state_t>())).old_state as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_state_t),
            "::",
            stringify!(old_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_set_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_set_state_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_set_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_set_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_set_state_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_set_state_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_state_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_state_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_suspend_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_suspend_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_suspend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_suspend_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_suspend_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_suspend_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_suspend_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_suspend_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_suspend_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_suspend_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_suspend_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_resume_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_resume_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_resume_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_resume_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_resume_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_resume_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_resume_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_resume_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_resume_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_resume_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_resume_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_abort_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_abort_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_abort_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_abort_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_abort_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_abort_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_abort_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_abort_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_abort_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_abort_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_abort_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_abort_safely_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_abort_safely_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_abort_safely_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_abort_safely_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_abort_safely_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_abort_safely_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_abort_safely_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_abort_safely_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_abort_safely_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_abort_safely_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_abort_safely_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_depress_abort_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_depress_abort_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_depress_abort_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_depress_abort_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_depress_abort_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_depress_abort_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_depress_abort_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_depress_abort_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_depress_abort_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_depress_abort_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_depress_abort_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_get_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_get_special_port_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__thread_get_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_get_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_get_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_special_port_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_special_port_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_special_port_t>())).special_port as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_special_port_t),
            "::",
            stringify!(special_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_set_special_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_set_special_port_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_set_special_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_set_special_port_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_set_special_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_special_port_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_special_port_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_special_port_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_special_port_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_special_port_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_special_port_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__thread_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_info_t>(),
        168usize,
        concat!("Size of: ", stringify!(__Reply__thread_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_info_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_info_t>())).thread_info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_info_t),
            "::",
            stringify!(thread_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_info_t>())).thread_info_out as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_info_t),
            "::",
            stringify!(thread_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_set_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_set_exception_ports_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__thread_set_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_set_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_set_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_exception_ports_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_exception_ports_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_exception_ports_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__thread_get_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_get_exception_ports_t>(),
        808usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__thread_get_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_get_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_get_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).old_handlers
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(old_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).NDR as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).masksCnt as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(masksCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).masks as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).old_behaviors
                as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(old_behaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_exception_ports_t>())).old_flavors
                as *const _ as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_exception_ports_t),
            "::",
            stringify!(old_flavors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__thread_swap_exception_ports_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_swap_exception_ports_t>(),
        808usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__thread_swap_exception_ports_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_swap_exception_ports_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_swap_exception_ports_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).old_handlers
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(old_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).NDR as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).masksCnt as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(masksCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).masks as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).old_behaviors
                as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(old_behaviors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_exception_ports_t>())).old_flavors
                as *const _ as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_exception_ports_t),
            "::",
            stringify!(old_flavors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_policy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_policy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_policy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_policy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_policy_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_policy_set_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_policy_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_policy_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_policy_set_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_set_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_set_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_set_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_set_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_policy_get_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_policy_get_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__thread_policy_get_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_policy_get_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_policy_get_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_get_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_get_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_get_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_get_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_get_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_get_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_get_t>())).policy_infoCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_get_t),
            "::",
            stringify!(policy_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_get_t>())).policy_info as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_get_t),
            "::",
            stringify!(policy_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_policy_get_t>())).get_default as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_policy_get_t),
            "::",
            stringify!(get_default)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_sample_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_sample_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_sample_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_sample_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_sample_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_sample_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_sample_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_sample_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__etap_trace_thread_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__etap_trace_thread_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__etap_trace_thread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__etap_trace_thread_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__etap_trace_thread_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__etap_trace_thread_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__etap_trace_thread_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__etap_trace_thread_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__etap_trace_thread_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__etap_trace_thread_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__etap_trace_thread_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_assign_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_assign_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_assign_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_assign_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_assign_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_assign_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_assign_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__thread_assign_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_assign_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_assign_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_assign_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_assign_default_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_assign_default_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_assign_default_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_assign_default_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_assign_default_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_assign_default_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_assign_default_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_assign_default_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_assign_default_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_assign_default_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_assign_default_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_get_assignment_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_get_assignment_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__thread_get_assignment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_get_assignment_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_get_assignment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_assignment_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_assignment_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_assignment_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_assignment_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_assignment_t>())).assigned_set as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_assignment_t),
            "::",
            stringify!(assigned_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_set_policy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_set_policy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_set_policy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_set_policy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__thread_set_policy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_policy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_policy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_policy_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_policy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_policy_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_policy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_get_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_get_mach_voucher_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__thread_get_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_get_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_get_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_get_mach_voucher_t>())).voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_get_mach_voucher_t),
            "::",
            stringify!(voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_set_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_set_mach_voucher_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__thread_set_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_set_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_set_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_mach_voucher_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_mach_voucher_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_mach_voucher_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_set_mach_voucher_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_set_mach_voucher_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__thread_swap_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_swap_mach_voucher_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__thread_swap_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_swap_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_swap_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_swap_mach_voucher_t>())).old_voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_swap_mach_voucher_t),
            "::",
            stringify!(old_voucher)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Reply__thread_convert_thread_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__thread_convert_thread_state_t>(),
        5224usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__thread_convert_thread_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__thread_convert_thread_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__thread_convert_thread_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_convert_thread_state_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_convert_thread_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_convert_thread_state_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_convert_thread_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_convert_thread_state_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_convert_thread_state_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_convert_thread_state_t>())).out_stateCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_convert_thread_state_t),
            "::",
            stringify!(out_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__thread_convert_thread_state_t>())).out_state as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__thread_convert_thread_state_t),
            "::",
            stringify!(out_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    _bindgen_union_align: [u32; 1306usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__thread_act_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__thread_act_subsystem>(),
        5224usize,
        concat!("Size of: ", stringify!(__ReplyUnion__thread_act_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__thread_act_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__thread_act_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_terminate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_terminate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_act_get_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_act_get_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_act_set_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_act_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_get_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_get_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_set_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_suspend
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_suspend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_resume
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_resume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_abort
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_abort_safely
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_abort_safely)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_depress_abort as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_depress_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_get_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_get_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_set_special_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_set_special_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_set_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_set_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_get_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_get_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_swap_exception_ports as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_swap_exception_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_policy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_policy_set
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_policy_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_policy_get
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_policy_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_sample
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_etap_trace_thread
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_etap_trace_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_assign
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_assign_default as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_assign_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_get_assignment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_get_assignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>())).Reply_thread_set_policy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_set_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_get_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_get_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_set_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_set_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_swap_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_swap_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__thread_act_subsystem>()))
                .Reply_thread_convert_thread_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__thread_act_subsystem),
            "::",
            stringify!(Reply_thread_convert_thread_state)
        )
    );
}
extern "C" {
    pub fn vm_region(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__vm_region_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_region_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_region_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_t>())).address as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_t>())).flavor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_t>())).infoCnt as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__vm_allocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_allocate_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__vm_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_allocate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_allocate_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_allocate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_allocate_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_allocate_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_allocate_t>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_allocate_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout___Request__vm_deallocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_deallocate_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_deallocate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_deallocate_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_deallocate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_deallocate_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_deallocate_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_deallocate_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_deallocate_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__vm_protect_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_protect_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__vm_protect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_protect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_protect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_protect_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_protect_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_protect_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_protect_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_protect_t>())).address as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_protect_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_protect_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_protect_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_protect_t>())).set_maximum as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_protect_t),
            "::",
            stringify!(set_maximum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_protect_t>())).new_protection as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_protect_t),
            "::",
            stringify!(new_protection)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__vm_inherit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_inherit_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__vm_inherit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_inherit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_inherit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_inherit_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_inherit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_inherit_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_inherit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_inherit_t>())).address as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_inherit_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_inherit_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_inherit_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_inherit_t>())).new_inheritance as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_inherit_t),
            "::",
            stringify!(new_inheritance)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout___Request__vm_read_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_read_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_read_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_read_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_t>())).address as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[test]
fn bindgen_test_layout___Request__vm_read_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_read_list_t>(),
        4132usize,
        concat!("Size of: ", stringify!(__Request__vm_read_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_read_list_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_read_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_list_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_list_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_list_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_list_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_read_list_t>())).data_list as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_list_t),
            "::",
            stringify!(data_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_read_list_t>())).count as *const _ as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_list_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__vm_write_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_write_t>(),
        64usize,
        concat!("Size of: ", stringify!(__Request__vm_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_write_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_write_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_write_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_write_t>())).msgh_body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_write_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_write_t>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_write_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_write_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_write_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_write_t>())).address as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_write_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_write_t>())).dataCnt as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_write_t),
            "::",
            stringify!(dataCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__vm_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_copy_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__vm_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_copy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_copy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_copy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_copy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_copy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_copy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_copy_t>())).source_address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_copy_t),
            "::",
            stringify!(source_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_copy_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_copy_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_copy_t>())).dest_address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_copy_t),
            "::",
            stringify!(dest_address)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__vm_read_overwrite_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_read_overwrite_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__vm_read_overwrite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_read_overwrite_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_read_overwrite_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_read_overwrite_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_overwrite_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_read_overwrite_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_overwrite_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_read_overwrite_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_overwrite_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_read_overwrite_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_overwrite_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_read_overwrite_t>())).data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_read_overwrite_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[test]
fn bindgen_test_layout___Request__vm_msync_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_msync_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__vm_msync_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_msync_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_msync_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_msync_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_msync_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_msync_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_msync_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_msync_t>())).address as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_msync_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_msync_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_msync_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_msync_t>())).sync_flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_msync_t),
            "::",
            stringify!(sync_flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[test]
fn bindgen_test_layout___Request__vm_behavior_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_behavior_set_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__vm_behavior_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_behavior_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_behavior_set_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_behavior_set_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_behavior_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_behavior_set_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_behavior_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_behavior_set_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_behavior_set_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_behavior_set_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_behavior_set_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_behavior_set_t>())).new_behavior as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_behavior_set_t),
            "::",
            stringify!(new_behavior)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__vm_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_map_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Request__vm_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_map_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).msgh_body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).object as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).address as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).mask as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).offset as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).copy as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_t>())).cur_protection as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(cur_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_t>())).max_protection as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_t>())).inheritance as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_t),
            "::",
            stringify!(inheritance)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[test]
fn bindgen_test_layout___Request__vm_machine_attribute_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_machine_attribute_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__vm_machine_attribute_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_machine_attribute_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__vm_machine_attribute_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_machine_attribute_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_machine_attribute_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_machine_attribute_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_machine_attribute_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_machine_attribute_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_machine_attribute_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_machine_attribute_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_machine_attribute_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_machine_attribute_t>())).attribute as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_machine_attribute_t),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_machine_attribute_t>())).value as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_machine_attribute_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__vm_remap_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_remap_t>(),
        92usize,
        concat!("Size of: ", stringify!(__Request__vm_remap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_remap_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_remap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).msgh_body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).src_task as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(src_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_remap_t>())).target_address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(target_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).mask as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_remap_t>())).src_address as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(src_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_remap_t>())).copy as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_remap_t>())).inheritance as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_remap_t),
            "::",
            stringify!(inheritance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__task_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_wire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__task_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__task_wire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_wire_t>())).must_wire as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_wire_t),
            "::",
            stringify!(must_wire)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__mach_make_memory_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_make_memory_entry_t>(),
        68usize,
        concat!("Size of: ", stringify!(__Request__mach_make_memory_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_make_memory_entry_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_make_memory_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).parent_entry as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(parent_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).size as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).offset as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_t>())).permission as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_t),
            "::",
            stringify!(permission)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[test]
fn bindgen_test_layout___Request__vm_map_page_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_map_page_query_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__vm_map_page_query_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_map_page_query_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_map_page_query_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_page_query_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_page_query_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_page_query_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_page_query_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_page_query_t>())).offset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_page_query_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_region_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_region_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_region_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_region_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_region_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_info_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_info_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__vm_mapped_pages_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_mapped_pages_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__vm_mapped_pages_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_mapped_pages_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__vm_mapped_pages_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_mapped_pages_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_mapped_pages_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__vm_region_recurse_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_region_recurse_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_region_recurse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_region_recurse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_region_recurse_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_t>())).nesting_depth as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_t),
            "::",
            stringify!(nesting_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_t>())).infoCnt as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__vm_region_recurse_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_region_recurse_64_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_region_recurse_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_region_recurse_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__vm_region_recurse_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_64_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_64_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_64_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_64_t>())).nesting_depth as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_64_t),
            "::",
            stringify!(nesting_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_recurse_64_t>())).infoCnt as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_recurse_64_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_region_info_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_region_info_64_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_region_info_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_region_info_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_region_info_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_info_64_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_info_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_info_64_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_info_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_info_64_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_info_64_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__vm_region_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_region_64_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_region_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_region_64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_region_64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_64_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_region_64_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_64_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_64_t>())).flavor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_64_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_region_64_t>())).infoCnt as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_region_64_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__mach_make_memory_entry_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_make_memory_entry_64_t>(),
        68usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_make_memory_entry_64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_make_memory_entry_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_make_memory_entry_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).parent_entry
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(parent_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).size as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).offset as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_make_memory_entry_64_t>())).permission
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_make_memory_entry_64_t),
            "::",
            stringify!(permission)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__vm_map_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_map_64_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Request__vm_map_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_map_64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__vm_map_64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_64_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).object as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).address as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).mask as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).offset as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__vm_map_64_t>())).copy as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_64_t>())).cur_protection as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(cur_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_64_t>())).max_protection as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_64_t>())).inheritance as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_64_t),
            "::",
            stringify!(inheritance)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__vm_purgable_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_purgable_control_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__vm_purgable_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_purgable_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__vm_purgable_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_purgable_control_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_purgable_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_purgable_control_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_purgable_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_purgable_control_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_purgable_control_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_purgable_control_t>())).control as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_purgable_control_t),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_purgable_control_t>())).state as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_purgable_control_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__vm_map_exec_lockdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__vm_map_exec_lockdown_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__vm_map_exec_lockdown_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__vm_map_exec_lockdown_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__vm_map_exec_lockdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__vm_map_exec_lockdown_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__vm_map_exec_lockdown_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    _bindgen_union_align: [u32; 1033usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__vm_map_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__vm_map_subsystem>(),
        4132usize,
        concat!("Size of: ", stringify!(__RequestUnion__vm_map_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__vm_map_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__vm_map_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_region
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_allocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_deallocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_protect
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_protect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_inherit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_inherit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_read as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_read_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_read_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_write
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_copy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_read_overwrite
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_read_overwrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_msync
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_msync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_behavior_set
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_behavior_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_map as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_vm_machine_attribute as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_machine_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_remap
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_remap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_task_wire
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_task_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_mach_make_memory_entry as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_mach_make_memory_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_map_page_query
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_map_page_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_mach_vm_region_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_mach_vm_region_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_vm_mapped_pages_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_mapped_pages_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_region_recurse
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_region_recurse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_vm_region_recurse_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_region_recurse_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_mach_vm_region_info_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_mach_vm_region_info_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_region_64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_region_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_mach_make_memory_entry_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_mach_make_memory_entry_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_map_64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_map_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>())).Request_vm_purgable_control
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_purgable_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__vm_map_subsystem>()))
                .Request_vm_map_exec_lockdown as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__vm_map_subsystem),
            "::",
            stringify!(Request_vm_map_exec_lockdown)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[test]
fn bindgen_test_layout___Reply__vm_region_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_region_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__vm_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_region_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).msgh_body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_t>())).object_name as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(object_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).address as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).infoCnt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_t>())).info as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_allocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_allocate_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__vm_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_allocate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_allocate_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_allocate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_allocate_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_allocate_t>())).address as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_allocate_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_deallocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_deallocate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_deallocate_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_deallocate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_deallocate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_deallocate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_protect_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_protect_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_protect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_protect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_protect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_protect_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_protect_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_protect_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_protect_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_protect_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_protect_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_inherit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_inherit_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_inherit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_inherit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_inherit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_inherit_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_inherit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_inherit_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_inherit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_inherit_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_inherit_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_read_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_read_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__vm_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_read_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_read_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_t>())).msgh_body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_t>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_t>())).dataCnt as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_t),
            "::",
            stringify!(dataCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_read_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_read_list_t>(),
        4132usize,
        concat!("Size of: ", stringify!(__Reply__vm_read_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_read_list_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_read_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_list_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_list_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_list_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_list_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_read_list_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_list_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_read_list_t>())).data_list as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_list_t),
            "::",
            stringify!(data_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_write_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_write_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_write_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_write_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_write_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_write_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_write_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_write_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_write_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_copy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_copy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_copy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_copy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_copy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_copy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_copy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_copy_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_copy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_read_overwrite_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_read_overwrite_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__vm_read_overwrite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_read_overwrite_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_read_overwrite_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_read_overwrite_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_overwrite_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_read_overwrite_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_overwrite_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_read_overwrite_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_overwrite_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_read_overwrite_t>())).outsize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_read_overwrite_t),
            "::",
            stringify!(outsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_msync_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_msync_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_msync_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_msync_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_msync_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_msync_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_msync_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_msync_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_msync_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_msync_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_msync_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_behavior_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_behavior_set_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_behavior_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_behavior_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_behavior_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_behavior_set_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_behavior_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_behavior_set_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_behavior_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_behavior_set_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_behavior_set_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_map_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__vm_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_map_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_t>())).address as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_machine_attribute_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_machine_attribute_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__vm_machine_attribute_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_machine_attribute_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_machine_attribute_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_machine_attribute_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_machine_attribute_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_machine_attribute_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_machine_attribute_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_machine_attribute_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_machine_attribute_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_machine_attribute_t>())).value as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_machine_attribute_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_remap_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_remap_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Reply__vm_remap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_remap_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_remap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_remap_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_remap_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_remap_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_remap_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_remap_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_remap_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_remap_t>())).target_address as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_remap_t),
            "::",
            stringify!(target_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_remap_t>())).cur_protection as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_remap_t),
            "::",
            stringify!(cur_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_remap_t>())).max_protection as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_remap_t),
            "::",
            stringify!(max_protection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_wire_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_wire_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_wire_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_wire_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_wire_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_wire_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_wire_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_wire_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_wire_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__task_wire_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_wire_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_make_memory_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_make_memory_entry_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__mach_make_memory_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_make_memory_entry_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_make_memory_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_t>())).object_handle as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_t),
            "::",
            stringify!(object_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_t>())).size as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_map_page_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_map_page_query_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__vm_map_page_query_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_map_page_query_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_map_page_query_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_page_query_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_page_query_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_page_query_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_page_query_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_page_query_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_page_query_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_page_query_t>())).disposition as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_page_query_t),
            "::",
            stringify!(disposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_page_query_t>())).ref_count as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_page_query_t),
            "::",
            stringify!(ref_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_region_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_region_info_t>(),
        96usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_region_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_region_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_region_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_t>())).objects as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_t),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_t>())).region as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_t),
            "::",
            stringify!(region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_t>())).objectsCnt as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_t),
            "::",
            stringify!(objectsCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_mapped_pages_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_mapped_pages_info_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__vm_mapped_pages_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_mapped_pages_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_mapped_pages_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_mapped_pages_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_mapped_pages_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_mapped_pages_info_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_mapped_pages_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_mapped_pages_info_t>())).pages as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_mapped_pages_info_t),
            "::",
            stringify!(pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_mapped_pages_info_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_mapped_pages_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_mapped_pages_info_t>())).pagesCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_mapped_pages_info_t),
            "::",
            stringify!(pagesCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[test]
fn bindgen_test_layout___Reply__vm_region_recurse_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_region_recurse_t>(),
        136usize,
        concat!("Size of: ", stringify!(__Reply__vm_region_recurse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_region_recurse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_region_recurse_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).address as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).size as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).nesting_depth as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(nesting_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).infoCnt as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_t>())).info as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[test]
fn bindgen_test_layout___Reply__vm_region_recurse_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_region_recurse_64_t>(),
        136usize,
        concat!("Size of: ", stringify!(__Reply__vm_region_recurse_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_region_recurse_64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_region_recurse_64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).address as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).size as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).nesting_depth as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(nesting_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).infoCnt as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_recurse_64_t>())).info as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_recurse_64_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_region_info_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_region_info_64_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_region_info_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_region_info_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_vm_region_info_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_64_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_64_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_64_t>())).objects as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_64_t),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_64_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_64_t>())).region as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_64_t),
            "::",
            stringify!(region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_info_64_t>())).objectsCnt as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_info_64_t),
            "::",
            stringify!(objectsCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[test]
fn bindgen_test_layout___Reply__vm_region_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_region_64_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__vm_region_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_region_64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_region_64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).object_name as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(object_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).address as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).infoCnt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_region_64_t>())).info as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_region_64_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_make_memory_entry_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_make_memory_entry_64_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_make_memory_entry_64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_make_memory_entry_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_make_memory_entry_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_64_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_64_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_64_t>())).object_handle
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_64_t),
            "::",
            stringify!(object_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_64_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_make_memory_entry_64_t>())).size as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_make_memory_entry_64_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_map_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_map_64_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__vm_map_64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_map_64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_map_64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_64_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_64_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_64_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_64_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__vm_map_64_t>())).address as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_64_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Reply__vm_purgable_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_purgable_control_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__vm_purgable_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_purgable_control_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_purgable_control_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_purgable_control_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_purgable_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_purgable_control_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_purgable_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_purgable_control_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_purgable_control_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_purgable_control_t>())).state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_purgable_control_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__vm_map_exec_lockdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__vm_map_exec_lockdown_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__vm_map_exec_lockdown_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__vm_map_exec_lockdown_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__vm_map_exec_lockdown_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_exec_lockdown_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_exec_lockdown_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_exec_lockdown_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_exec_lockdown_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__vm_map_exec_lockdown_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__vm_map_exec_lockdown_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    _bindgen_union_align: [u32; 1033usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__vm_map_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__vm_map_subsystem>(),
        4132usize,
        concat!("Size of: ", stringify!(__ReplyUnion__vm_map_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__vm_map_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__ReplyUnion__vm_map_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_region as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_allocate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_deallocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_protect as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_protect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_inherit as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_inherit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_read as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_read_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_read_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_write as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_copy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_read_overwrite
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_read_overwrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_msync as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_msync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_behavior_set
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_behavior_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_map as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_machine_attribute
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_machine_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_remap as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_remap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_task_wire as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_task_wire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_mach_make_memory_entry
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_mach_make_memory_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_map_page_query
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_map_page_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_mach_vm_region_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_mach_vm_region_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_mapped_pages_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_mapped_pages_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_region_recurse
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_region_recurse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_region_recurse_64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_region_recurse_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_mach_vm_region_info_64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_mach_vm_region_info_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_region_64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_region_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>()))
                .Reply_mach_make_memory_entry_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_mach_make_memory_entry_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_map_64 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_map_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_purgable_control
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_purgable_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__vm_map_subsystem>())).Reply_vm_map_exec_lockdown
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__vm_map_subsystem),
            "::",
            stringify!(Reply_vm_map_exec_lockdown)
        )
    );
}
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_names_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_names_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_names_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_names_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_names_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_names_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_type_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_type_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_type_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_port_type_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_type_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_rename_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_rename_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_rename_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_rename_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_rename_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_rename_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_rename_t>())).old_name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(old_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_rename_t>())).new_name as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(new_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_name_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_name_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_allocate_name_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_name_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_allocate_name_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_name_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_name_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_name_t>())).right as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_name_t>())).name as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_allocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_t>())).right as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_destroy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destroy_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destroy_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_deallocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_deallocate_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_deallocate_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_deallocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_deallocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_deallocate_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_refs_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_refs_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_refs_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_refs_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_refs_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_refs_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_refs_t>())).right as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_mod_refs_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_mod_refs_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_mod_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_mod_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_mod_refs_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_mod_refs_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_mod_refs_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_mod_refs_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_mod_refs_t>())).right as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_mod_refs_t>())).delta as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(delta)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_peek_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_peek_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_peek_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_peek_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_peek_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_peek_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_port_peek_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_peek_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_peek_t>())).trailer_type as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_peek_t>())).request_seqnop as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(request_seqnop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_peek_t>())).trailer_infopCnt as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(trailer_infopCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_mscount_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_mscount_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_mscount_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_mscount_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_mscount_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_mscount_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_mscount_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_mscount_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_mscount_t>())).mscount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(mscount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_set_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_set_status_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_get_set_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_set_status_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_set_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_set_status_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_set_status_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_set_status_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_move_member_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_move_member_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_move_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_move_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_move_member_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_move_member_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_move_member_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_move_member_t>())).member as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_move_member_t>())).after as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(after)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_request_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_request_notification_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_request_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).notify
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).name as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).msgid
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_request_notification_t>())).sync as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(sync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_insert_right_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_insert_right_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_insert_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_insert_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_insert_right_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_right_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_right_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_right_t>())).poly as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(poly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_right_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_right_t>())).name as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_extract_right_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_extract_right_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_extract_right_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_extract_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_extract_right_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_right_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_right_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_right_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_right_t>())).msgt_name as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(msgt_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_seqno_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_seqno_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_seqno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_seqno_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_seqno_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_seqno_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_seqno_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_seqno_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_seqno_t>())).seqno as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_attributes_t>(),
        44usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_get_attributes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_attributes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_attributes_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_attributes_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_attributes_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_attributes_t>())).flavor as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_attributes_t>())).port_info_outCnt
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_attributes_t>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_set_attributes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_attributes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_attributes_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_attributes_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_attributes_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_attributes_t>())).flavor as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_attributes_t>())).port_infoCnt
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(port_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_attributes_t>())).port_info as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(port_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_qos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_qos_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_qos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_qos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_allocate_qos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_qos_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_qos_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_qos_t>())).right as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_qos_t>())).qos as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(qos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_full_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_full_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_allocate_full_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_full_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_allocate_full_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).proto as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).right as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).qos as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_allocate_full_t>())).name as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_set_port_space_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_port_space_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_set_port_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_port_space_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_port_space_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_port_space_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_port_space_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__task_set_port_space_t>())).table_entries as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(table_entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_srights_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_srights_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_srights_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_srights_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_srights_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_srights_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_srights_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_srights_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_space_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_space_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_space_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_space_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_space_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_space_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_space_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_dnrequest_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_dnrequest_info_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_dnrequest_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_dnrequest_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_dnrequest_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_dnrequest_info_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_dnrequest_info_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_dnrequest_info_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kernel_object_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kernel_object_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_kernel_object_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kernel_object_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_kernel_object_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kernel_object_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kernel_object_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kernel_object_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_insert_member_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_insert_member_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_insert_member_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_insert_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_insert_member_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_member_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_member_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_member_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_insert_member_t>())).pset as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(pset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_extract_member_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_extract_member_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_extract_member_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_extract_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_extract_member_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_member_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_member_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_member_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_extract_member_t>())).pset as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(pset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_context_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_context_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_context_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_get_context_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_context_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_context_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_context_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_context_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_set_context_t>())).context as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kobject_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kobject_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_kobject_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kobject_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_kobject_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kobject_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kobject_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kobject_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_construct_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_construct_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__mach_port_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_construct_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_construct_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_construct_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_construct_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_construct_t>())).options as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_construct_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_construct_t>())).context as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_destruct_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_destruct_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_destruct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_destruct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_destruct_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destruct_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destruct_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destruct_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destruct_t>())).srdelta as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(srdelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_destruct_t>())).guard as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(guard)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_guard_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_guard_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_guard_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_t>())).guard as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_t>())).strict as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(strict)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_unguard_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_unguard_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_unguard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_unguard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_unguard_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_unguard_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_unguard_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_unguard_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_unguard_t>())).guard as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(guard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_space_basic_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_space_basic_info_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_space_basic_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_space_basic_info_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_space_basic_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[test]
fn bindgen_test_layout___Request__mach_port_guard_with_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_guard_with_flags_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_guard_with_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_with_flags_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_with_flags_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_with_flags_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_with_flags_t>())).guard as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_guard_with_flags_t>())).flags as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_swap_guard_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_swap_guard_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_swap_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_swap_guard_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_swap_guard_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_swap_guard_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_swap_guard_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_swap_guard_t>())).name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_swap_guard_t>())).old_guard as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(old_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_swap_guard_t>())).new_guard as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(new_guard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kobject_description_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kobject_description_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kobject_description_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kobject_description_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kobject_description_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_port_kobject_description_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    _bindgen_union_align: [u32; 28usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__mach_port_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__mach_port_subsystem>(),
        112usize,
        concat!("Size of: ", stringify!(__RequestUnion__mach_port_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__mach_port_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__mach_port_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>())).Request_mach_port_names
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>())).Request_mach_port_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>())).Request_mach_port_rename
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_allocate_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_allocate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_destroy as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_deallocate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_get_refs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_mod_refs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_mod_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>())).Request_mach_port_peek
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_peek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_set_mscount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_mscount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_get_set_status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_set_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_move_member as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_move_member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_request_notification as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_insert_right as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_insert_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_extract_right as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_extract_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_set_seqno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_get_attributes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_set_attributes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_allocate_qos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_qos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_allocate_full as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_full)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_task_set_port_space as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_task_set_port_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_get_srights as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_srights)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_space_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_space_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_dnrequest_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_dnrequest_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_kernel_object as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kernel_object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_insert_member as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_insert_member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_extract_member as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_extract_member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_get_context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_set_context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_kobject as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_construct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_construct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_destruct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_destruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>())).Request_mach_port_guard
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_unguard as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_unguard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_space_basic_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_space_basic_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_guard_with_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_guard_with_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_swap_guard as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_swap_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_port_subsystem>()))
                .Request_mach_port_kobject_description as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kobject_description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_names_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_names_t>(),
        76usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_names_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_names_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).names as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).types as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).NDR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).namesCnt as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(namesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_names_t>())).typesCnt as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(typesCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_type_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_type_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_type_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_type_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_type_t>())).ptype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(ptype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_rename_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_rename_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_rename_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_rename_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_rename_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_rename_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_rename_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_name_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_name_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_name_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_allocate_name_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_name_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_name_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_name_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_allocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_t>())).name as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_destroy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_destroy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_destroy_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_destroy_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_destroy_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_deallocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_deallocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_deallocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_deallocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_deallocate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_refs_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_refs_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_refs_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_refs_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_refs_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_refs_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_refs_t>())).refs as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(refs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_mod_refs_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_mod_refs_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_mod_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_mod_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_mod_refs_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_mod_refs_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_mod_refs_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_mod_refs_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_peek_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_peek_t>(),
        120usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_peek_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_peek_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_peek_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).request_seqnop as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(request_seqnop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).msg_sizep as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(msg_sizep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).msg_idp as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(msg_idp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).trailer_infopCnt as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(trailer_infopCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_peek_t>())).trailer_infop as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(trailer_infop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_mscount_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_mscount_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_mscount_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_mscount_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_set_mscount_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_mscount_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_mscount_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_mscount_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_set_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_set_status_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_set_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_set_status_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_set_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_set_status_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_set_status_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_set_status_t>())).members as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(members)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_set_status_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_set_status_t>())).membersCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(membersCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_move_member_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_move_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_move_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_move_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_move_member_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_move_member_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_move_member_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_move_member_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_request_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_request_notification_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_request_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_request_notification_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_request_notification_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_request_notification_t>())).previous
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(previous)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_insert_right_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_insert_right_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_insert_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_insert_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_insert_right_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_insert_right_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_insert_right_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_insert_right_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_extract_right_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_extract_right_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_extract_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_extract_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_extract_right_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_extract_right_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_extract_right_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_extract_right_t>())).poly as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(poly)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_seqno_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_seqno_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_seqno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_seqno_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_set_seqno_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_seqno_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_seqno_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_seqno_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_attributes_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_attributes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_attributes_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_attributes_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_attributes_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_attributes_t>())).port_info_outCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_attributes_t>())).port_info_out
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_attributes_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_set_attributes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_attributes_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_attributes_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_attributes_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_qos_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_qos_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_qos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_qos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_allocate_qos_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_qos_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_qos_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_qos_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_qos_t>())).qos as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_qos_t>())).name as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_full_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_full_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_full_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_full_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_allocate_full_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_full_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_full_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_full_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_full_t>())).qos as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_allocate_full_t>())).name as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_port_space_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_port_space_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_port_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_port_space_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_port_space_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_port_space_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_port_space_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__task_set_port_space_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_srights_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_srights_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_srights_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_srights_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_srights_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_srights_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_srights_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_srights_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_srights_t>())).srights as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(srights)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_space_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_space_info_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_space_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_space_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_space_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).table_info as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(table_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).tree_info as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(tree_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).NDR as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).space_info as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(space_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).table_infoCnt as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(table_infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_info_t>())).tree_infoCnt as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(tree_infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_dnrequest_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_dnrequest_info_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_dnrequest_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_dnrequest_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_dnrequest_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_dnrequest_info_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_dnrequest_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_dnrequest_info_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_dnrequest_info_t>())).dnr_total as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(dnr_total)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_dnrequest_info_t>())).dnr_used as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(dnr_used)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kernel_object_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kernel_object_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kernel_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kernel_object_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_kernel_object_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kernel_object_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kernel_object_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kernel_object_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kernel_object_t>())).object_type as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kernel_object_t>())).object_addr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(object_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_insert_member_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_insert_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_insert_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_insert_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_insert_member_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_insert_member_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_insert_member_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_insert_member_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_extract_member_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_extract_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_extract_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_extract_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_extract_member_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_extract_member_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_extract_member_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_extract_member_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_context_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_context_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_context_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_context_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_get_context_t>())).context as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_context_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_set_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_context_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_context_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_set_context_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kobject_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kobject_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kobject_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kobject_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_kobject_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_t>())).object_type as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_t>())).object_addr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(object_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_construct_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_construct_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_construct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_construct_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_construct_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_construct_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_construct_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_construct_t>())).name as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_destruct_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_destruct_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_destruct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_destruct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_destruct_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_destruct_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_destruct_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_destruct_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_guard_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_guard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_guard_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_guard_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_port_guard_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_guard_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_unguard_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_unguard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_unguard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_unguard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_unguard_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_unguard_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_unguard_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_unguard_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_space_basic_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_space_basic_info_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_space_basic_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_basic_info_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_basic_info_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_basic_info_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_space_basic_info_t>())).basic_info as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(basic_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_guard_with_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_guard_with_flags_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_guard_with_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_guard_with_flags_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_guard_with_flags_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_guard_with_flags_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_swap_guard_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_swap_guard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_swap_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_swap_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_swap_guard_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_swap_guard_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_swap_guard_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_swap_guard_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kobject_description_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kobject_description_t>(),
        568usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kobject_description_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).object_type
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).object_addr
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(object_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).descriptionOffset
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(descriptionOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).descriptionCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(descriptionCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_port_kobject_description_t>())).description
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    _bindgen_union_align: [u32; 142usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__mach_port_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__mach_port_subsystem>(),
        568usize,
        concat!("Size of: ", stringify!(__ReplyUnion__mach_port_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__mach_port_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__mach_port_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_names
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_rename
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_allocate_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_allocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_destroy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_deallocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_get_refs
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_mod_refs
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_mod_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_peek
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_peek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_set_mscount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_mscount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_get_set_status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_set_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_move_member as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_move_member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_request_notification as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_insert_right as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_insert_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_extract_right as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_extract_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_set_seqno
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_get_attributes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_set_attributes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_allocate_qos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_qos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_allocate_full as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_full)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_task_set_port_space
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_task_set_port_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_get_srights as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_srights)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_space_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_space_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_dnrequest_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_dnrequest_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_kernel_object as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kernel_object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_insert_member as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_insert_member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_extract_member as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_extract_member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_get_context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_set_context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_kobject
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kobject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_construct
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_construct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_destruct
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_destruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_guard
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_unguard
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_unguard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_space_basic_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_space_basic_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_guard_with_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_guard_with_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>())).Reply_mach_port_swap_guard
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_swap_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_port_subsystem>()))
                .Reply_mach_port_kobject_description as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kobject_description)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_master(host: host_t, io_master: *mut io_master_t) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__host_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_info_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__host_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__host_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__host_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__host_info_t>())).flavor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_info_t>())).host_info_outCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_info_t),
            "::",
            stringify!(host_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_kernel_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_kernel_version_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_kernel_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_kernel_version_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_kernel_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_kernel_version_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_kernel_version_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request___host_page_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request___host_page_size_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request___host_page_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request___host_page_size_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request___host_page_size_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___host_page_size_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___host_page_size_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__mach_memory_object_memory_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_memory_object_memory_entry_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_memory_object_memory_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_memory_object_memory_entry_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_memory_object_memory_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).pager
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(pager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).internal
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).size
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_t>())).permission
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_t),
            "::",
            stringify!(permission)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__host_processor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_processor_info_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__host_processor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_processor_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_processor_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_processor_info_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_processor_info_t),
            "::",
            stringify!(flavor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_master_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_io_master_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_io_master_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_get_io_master_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_io_master_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_get_io_master_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_io_master_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_io_master_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_clock_service_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_clock_service_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__host_get_clock_service_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_clock_service_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_get_clock_service_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_clock_service_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_clock_service_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_clock_service_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_clock_service_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_clock_service_t>())).clock_id as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_clock_service_t),
            "::",
            stringify!(clock_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__kmod_get_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__kmod_get_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__kmod_get_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__kmod_get_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__kmod_get_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__kmod_get_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__kmod_get_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_virtual_physical_table_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_virtual_physical_table_info_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_virtual_physical_table_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_virtual_physical_table_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_virtual_physical_table_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_virtual_physical_table_info_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_virtual_physical_table_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_default_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_default_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_set_default_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_default_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_default_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_default_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_default_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__processor_set_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__processor_set_create_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__processor_set_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__processor_set_create_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__processor_set_create_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__processor_set_create_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__processor_set_create_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__mach_memory_object_memory_entry_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_memory_object_memory_entry_64_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_memory_object_memory_entry_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).pager
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(pager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).NDR
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).internal
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).size
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_object_memory_entry_64_t>())).permission
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(permission)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__host_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_statistics_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__host_statistics_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_statistics_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_statistics_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics_t>())).host_info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics_t),
            "::",
            stringify!(host_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[test]
fn bindgen_test_layout___Request__host_request_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_request_notification_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_request_notification_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_request_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_request_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_request_notification_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_request_notification_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_request_notification_t>())).notify_port
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_request_notification_t),
            "::",
            stringify!(notify_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_request_notification_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_request_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_request_notification_t>())).notify_type
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_request_notification_t),
            "::",
            stringify!(notify_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_lockgroup_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_lockgroup_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__host_lockgroup_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_lockgroup_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_lockgroup_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_lockgroup_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_lockgroup_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__host_statistics64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_statistics64_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__host_statistics64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_statistics64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__host_statistics64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics64_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics64_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics64_t>())).flavor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics64_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_statistics64_t>())).host_info64_outCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_statistics64_t),
            "::",
            stringify!(host_info64_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_zone_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_zone_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_zone_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_zone_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_zone_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_zone_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_zone_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[test]
fn bindgen_test_layout___Request__host_create_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_create_mach_voucher_t>(),
        5156usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_create_mach_voucher_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_create_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_create_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_create_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_create_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_create_mach_voucher_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_create_mach_voucher_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_create_mach_voucher_t>())).recipesCnt as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_create_mach_voucher_t),
            "::",
            stringify!(recipesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_create_mach_voucher_t>())).recipes as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_create_mach_voucher_t),
            "::",
            stringify!(recipes)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[test]
fn bindgen_test_layout___Request__host_register_mach_voucher_attr_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_register_mach_voucher_attr_manager_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_register_mach_voucher_attr_manager_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_mach_voucher_attr_manager_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_mach_voucher_attr_manager_t>()))
                .msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_mach_voucher_attr_manager_t>()))
                .attr_manager as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(attr_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_mach_voucher_attr_manager_t>())).NDR
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_mach_voucher_attr_manager_t>()))
                .default_value as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(default_value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[test]
fn bindgen_test_layout___Request__host_register_well_known_mach_voucher_attr_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .attr_manager as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(attr_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .default_value as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .key as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[test]
fn bindgen_test_layout___Request__host_set_atm_diagnostic_flag_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_set_atm_diagnostic_flag_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_set_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_set_atm_diagnostic_flag_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_set_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_atm_diagnostic_flag_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_atm_diagnostic_flag_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_atm_diagnostic_flag_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_atm_diagnostic_flag_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_atm_diagnostic_flag_t>())).diagnostic_flag
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_atm_diagnostic_flag_t),
            "::",
            stringify!(diagnostic_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_atm_diagnostic_flag_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_atm_diagnostic_flag_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_get_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_atm_diagnostic_flag_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_get_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_atm_diagnostic_flag_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_atm_diagnostic_flag_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_memory_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_memory_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_memory_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_memory_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_memory_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[test]
fn bindgen_test_layout___Request__host_set_multiuser_config_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_set_multiuser_config_flags_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_set_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_set_multiuser_config_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_set_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_multiuser_config_flags_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_multiuser_config_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_multiuser_config_flags_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_multiuser_config_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_set_multiuser_config_flags_t>())).multiuser_flags
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_set_multiuser_config_flags_t),
            "::",
            stringify!(multiuser_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_get_multiuser_config_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_get_multiuser_config_flags_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_get_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_get_multiuser_config_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_get_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_get_multiuser_config_flags_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_get_multiuser_config_flags_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__host_check_multiuser_mode_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__host_check_multiuser_mode_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__host_check_multiuser_mode_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__host_check_multiuser_mode_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__host_check_multiuser_mode_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__host_check_multiuser_mode_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__host_check_multiuser_mode_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_zone_info_for_zone_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_zone_info_for_zone_t>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_zone_info_for_zone_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_zone_info_for_zone_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_zone_info_for_zone_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_zone_info_for_zone_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_zone_info_for_zone_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_zone_info_for_zone_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_zone_info_for_zone_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_zone_info_for_zone_t>())).name as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_zone_info_for_zone_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_master: __Request__host_get_io_master_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
    _bindgen_union_align: [u32; 1289usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__mach_host_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__mach_host_subsystem>(),
        5156usize,
        concat!("Size of: ", stringify!(__RequestUnion__mach_host_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__mach_host_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__mach_host_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>())).Request_host_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_kernel_version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_kernel_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>())).Request__host_page_size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request__host_page_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_mach_memory_object_memory_entry as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_mach_memory_object_memory_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_processor_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_processor_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_get_io_master as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_get_io_master)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_get_clock_service as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_get_clock_service)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>())).Request_kmod_get_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_kmod_get_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_virtual_physical_table_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_virtual_physical_table_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_processor_set_default as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_processor_set_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_processor_set_create as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_processor_set_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_mach_memory_object_memory_entry_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_mach_memory_object_memory_entry_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>())).Request_host_statistics
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_statistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_request_notification as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_lockgroup_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_lockgroup_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_statistics64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_statistics64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>())).Request_mach_zone_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_mach_zone_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_create_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_create_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_register_mach_voucher_attr_manager as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_register_mach_voucher_attr_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_register_well_known_mach_voucher_attr_manager as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_register_well_known_mach_voucher_attr_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_set_atm_diagnostic_flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_set_atm_diagnostic_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_get_atm_diagnostic_flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_get_atm_diagnostic_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>())).Request_mach_memory_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_mach_memory_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_set_multiuser_config_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_set_multiuser_config_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_get_multiuser_config_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_get_multiuser_config_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_host_check_multiuser_mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_host_check_multiuser_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_host_subsystem>()))
                .Request_mach_zone_info_for_zone as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_host_subsystem),
            "::",
            stringify!(Request_mach_zone_info_for_zone)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[test]
fn bindgen_test_layout___Reply__host_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_info_t>(),
        312usize,
        concat!("Size of: ", stringify!(__Reply__host_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_info_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_info_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_info_t>())).host_info_outCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_info_t),
            "::",
            stringify!(host_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_info_t>())).host_info_out as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_info_t),
            "::",
            stringify!(host_info_out)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout___Reply__host_kernel_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_kernel_version_t>(),
        556usize,
        concat!("Size of: ", stringify!(__Reply__host_kernel_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_kernel_version_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_kernel_version_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_kernel_version_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_kernel_version_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_kernel_version_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_kernel_version_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_kernel_version_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_kernel_version_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_kernel_version_t>())).kernel_versionOffset
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_kernel_version_t),
            "::",
            stringify!(kernel_versionOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_kernel_version_t>())).kernel_versionCnt as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_kernel_version_t),
            "::",
            stringify!(kernel_versionCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_kernel_version_t>())).kernel_version as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_kernel_version_t),
            "::",
            stringify!(kernel_version)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[test]
fn bindgen_test_layout___Reply___host_page_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply___host_page_size_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply___host_page_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply___host_page_size_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply___host_page_size_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply___host_page_size_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___host_page_size_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply___host_page_size_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___host_page_size_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___host_page_size_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___host_page_size_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___host_page_size_t>())).out_page_size as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___host_page_size_t),
            "::",
            stringify!(out_page_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_memory_object_memory_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_memory_object_memory_entry_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_memory_object_memory_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_memory_object_memory_entry_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_memory_object_memory_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_object_memory_entry_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_object_memory_entry_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_object_memory_entry_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_object_memory_entry_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_object_memory_entry_t>())).entry_handle
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_object_memory_entry_t),
            "::",
            stringify!(entry_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__host_processor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_processor_info_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Reply__host_processor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_processor_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_processor_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_info_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_info_t>())).out_processor_info
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_info_t),
            "::",
            stringify!(out_processor_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_info_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_info_t>())).out_processor_count
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_info_t),
            "::",
            stringify!(out_processor_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_processor_info_t>())).out_processor_infoCnt
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_processor_info_t),
            "::",
            stringify!(out_processor_infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_master_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_master: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_get_io_master_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_io_master_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_get_io_master_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_io_master_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_get_io_master_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_io_master_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_io_master_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_io_master_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_io_master_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_io_master_t>())).io_master as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_io_master_t),
            "::",
            stringify!(io_master)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_get_clock_service_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_clock_service_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_get_clock_service_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_clock_service_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_get_clock_service_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_clock_service_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_clock_service_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_clock_service_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_clock_service_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_clock_service_t>())).clock_serv as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_clock_service_t),
            "::",
            stringify!(clock_serv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__kmod_get_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__kmod_get_info_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__kmod_get_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__kmod_get_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__kmod_get_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_get_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_get_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kmod_get_info_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_get_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kmod_get_info_t>())).modules as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_get_info_t),
            "::",
            stringify!(modules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__kmod_get_info_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_get_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__kmod_get_info_t>())).modulesCnt as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__kmod_get_info_t),
            "::",
            stringify!(modulesCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__host_virtual_physical_table_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_virtual_physical_table_info_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_virtual_physical_table_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_virtual_physical_table_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_virtual_physical_table_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_virtual_physical_table_info_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_virtual_physical_table_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_virtual_physical_table_info_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_virtual_physical_table_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_virtual_physical_table_info_t>())).info as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_virtual_physical_table_info_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_virtual_physical_table_info_t>())).NDR as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_virtual_physical_table_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_virtual_physical_table_info_t>())).infoCnt
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_virtual_physical_table_info_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_default_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_default_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_default_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_default_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__processor_set_default_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_default_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_default_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_default_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_default_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_default_t>())).default_set as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_default_t),
            "::",
            stringify!(default_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__processor_set_create_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__processor_set_create_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Reply__processor_set_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__processor_set_create_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__processor_set_create_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_create_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_create_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_create_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_create_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_create_t>())).new_set as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_create_t),
            "::",
            stringify!(new_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__processor_set_create_t>())).new_name as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__processor_set_create_t),
            "::",
            stringify!(new_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_memory_object_memory_entry_64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_memory_object_memory_entry_64_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_memory_object_memory_entry_64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_memory_object_memory_entry_64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_memory_object_memory_entry_64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_object_memory_entry_64_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_object_memory_entry_64_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_object_memory_entry_64_t>())).entry_handle
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_object_memory_entry_64_t),
            "::",
            stringify!(entry_handle)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[test]
fn bindgen_test_layout___Reply__host_statistics_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_statistics_t>(),
        312usize,
        concat!("Size of: ", stringify!(__Reply__host_statistics_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_statistics_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_statistics_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_statistics_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__host_statistics_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics_t>())).host_info_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics_t),
            "::",
            stringify!(host_info_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics_t>())).host_info_out as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics_t),
            "::",
            stringify!(host_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_request_notification_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_request_notification_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_request_notification_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_request_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_request_notification_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_request_notification_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_request_notification_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_request_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_request_notification_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_request_notification_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__host_lockgroup_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_lockgroup_info_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__host_lockgroup_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_lockgroup_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_lockgroup_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_lockgroup_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_lockgroup_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_lockgroup_info_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_lockgroup_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_lockgroup_info_t>())).lockgroup_info as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_lockgroup_info_t),
            "::",
            stringify!(lockgroup_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_lockgroup_info_t>())).NDR as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_lockgroup_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_lockgroup_info_t>())).lockgroup_infoCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_lockgroup_info_t),
            "::",
            stringify!(lockgroup_infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[test]
fn bindgen_test_layout___Reply__host_statistics64_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_statistics64_t>(),
        1064usize,
        concat!("Size of: ", stringify!(__Reply__host_statistics64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_statistics64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__host_statistics64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics64_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics64_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics64_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics64_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics64_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics64_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics64_t>())).host_info64_outCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics64_t),
            "::",
            stringify!(host_info64_outCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_statistics64_t>())).host_info64_out as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_statistics64_t),
            "::",
            stringify!(host_info64_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_zone_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_zone_info_t>(),
        76usize,
        concat!("Size of: ", stringify!(__Reply__mach_zone_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_zone_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_zone_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).names as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).info as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).NDR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).namesCnt as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(namesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_t>())).infoCnt as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_create_mach_voucher_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_create_mach_voucher_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__host_create_mach_voucher_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_create_mach_voucher_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_create_mach_voucher_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_create_mach_voucher_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_create_mach_voucher_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_create_mach_voucher_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_create_mach_voucher_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_create_mach_voucher_t>())).voucher as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_create_mach_voucher_t),
            "::",
            stringify!(voucher)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[test]
fn bindgen_test_layout___Reply__host_register_mach_voucher_attr_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_register_mach_voucher_attr_manager_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_register_mach_voucher_attr_manager_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_mach_voucher_attr_manager_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_mach_voucher_attr_manager_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_mach_voucher_attr_manager_t>()))
                .new_attr_control as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(new_attr_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_mach_voucher_attr_manager_t>())).NDR
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_mach_voucher_attr_manager_t>())).new_key
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_mach_voucher_attr_manager_t),
            "::",
            stringify!(new_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__host_register_well_known_mach_voucher_attr_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_register_well_known_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_register_well_known_mach_voucher_attr_manager_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>(
            )))
            .new_attr_control as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_register_well_known_mach_voucher_attr_manager_t),
            "::",
            stringify!(new_attr_control)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_set_atm_diagnostic_flag_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_set_atm_diagnostic_flag_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_set_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_set_atm_diagnostic_flag_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_set_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_atm_diagnostic_flag_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_atm_diagnostic_flag_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_atm_diagnostic_flag_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_atm_diagnostic_flag_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_atm_diagnostic_flag_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_atm_diagnostic_flag_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[test]
fn bindgen_test_layout___Reply__host_get_atm_diagnostic_flag_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_atm_diagnostic_flag_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_get_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_atm_diagnostic_flag_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_get_atm_diagnostic_flag_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_atm_diagnostic_flag_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_atm_diagnostic_flag_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_atm_diagnostic_flag_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_atm_diagnostic_flag_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_atm_diagnostic_flag_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_atm_diagnostic_flag_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_atm_diagnostic_flag_t>())).diagnostic_flag
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_atm_diagnostic_flag_t),
            "::",
            stringify!(diagnostic_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_memory_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_memory_info_t>(),
        96usize,
        concat!("Size of: ", stringify!(__Reply__mach_memory_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_memory_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_memory_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).names as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).info as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).memory_info as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(memory_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).NDR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).namesCnt as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(namesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).infoCnt as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_info_t>())).memory_infoCnt as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_info_t),
            "::",
            stringify!(memory_infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__host_set_multiuser_config_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_set_multiuser_config_flags_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_set_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_set_multiuser_config_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_set_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_multiuser_config_flags_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_multiuser_config_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_multiuser_config_flags_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_multiuser_config_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_set_multiuser_config_flags_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_set_multiuser_config_flags_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[test]
fn bindgen_test_layout___Reply__host_get_multiuser_config_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_get_multiuser_config_flags_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_get_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_get_multiuser_config_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_get_multiuser_config_flags_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_multiuser_config_flags_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_multiuser_config_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_multiuser_config_flags_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_multiuser_config_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_multiuser_config_flags_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_multiuser_config_flags_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_get_multiuser_config_flags_t>())).multiuser_flags
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_get_multiuser_config_flags_t),
            "::",
            stringify!(multiuser_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[test]
fn bindgen_test_layout___Reply__host_check_multiuser_mode_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__host_check_multiuser_mode_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__host_check_multiuser_mode_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__host_check_multiuser_mode_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__host_check_multiuser_mode_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_check_multiuser_mode_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_check_multiuser_mode_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_check_multiuser_mode_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_check_multiuser_mode_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_check_multiuser_mode_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_check_multiuser_mode_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__host_check_multiuser_mode_t>())).multiuser_mode
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__host_check_multiuser_mode_t),
            "::",
            stringify!(multiuser_mode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_zone_info_for_zone_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_zone_info_for_zone_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Reply__mach_zone_info_for_zone_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_zone_info_for_zone_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_zone_info_for_zone_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_for_zone_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_for_zone_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_for_zone_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_for_zone_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_for_zone_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_for_zone_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_zone_info_for_zone_t>())).info as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_zone_info_for_zone_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_master: __Reply__host_get_io_master_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
    _bindgen_union_align: [u32; 266usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__mach_host_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__mach_host_subsystem>(),
        1064usize,
        concat!("Size of: ", stringify!(__ReplyUnion__mach_host_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__mach_host_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__mach_host_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_kernel_version
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_kernel_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply__host_page_size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply__host_page_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_mach_memory_object_memory_entry as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_mach_memory_object_memory_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_processor_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_processor_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_get_io_master
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_get_io_master)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_get_clock_service as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_get_clock_service)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_kmod_get_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_kmod_get_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_virtual_physical_table_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_virtual_physical_table_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_processor_set_default as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_processor_set_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_processor_set_create
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_processor_set_create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_mach_memory_object_memory_entry_64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_mach_memory_object_memory_entry_64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_statistics
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_statistics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_request_notification as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_lockgroup_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_lockgroup_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_host_statistics64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_statistics64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_mach_zone_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_mach_zone_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_create_mach_voucher as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_create_mach_voucher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_register_mach_voucher_attr_manager as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_register_mach_voucher_attr_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_register_well_known_mach_voucher_attr_manager as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_register_well_known_mach_voucher_attr_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_set_atm_diagnostic_flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_set_atm_diagnostic_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_get_atm_diagnostic_flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_get_atm_diagnostic_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>())).Reply_mach_memory_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_mach_memory_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_set_multiuser_config_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_set_multiuser_config_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_get_multiuser_config_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_get_multiuser_config_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_host_check_multiuser_mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_host_check_multiuser_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_host_subsystem>()))
                .Reply_mach_zone_info_for_zone as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_host_subsystem),
            "::",
            stringify!(Reply_mach_zone_info_for_zone)
        )
    );
}
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
#[test]
fn bindgen_test_layout_rpc_routine_arg_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<rpc_routine_arg_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(rpc_routine_arg_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<rpc_routine_arg_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(rpc_routine_arg_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_arg_descriptor>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_arg_descriptor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_routine_arg_descriptor>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_arg_descriptor),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_arg_descriptor>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_arg_descriptor),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_arg_descriptor>())).offset as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_arg_descriptor),
            "::",
            stringify!(offset)
        )
    );
}
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rpc_routine_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<rpc_routine_descriptor>(),
        40usize,
        concat!("Size of: ", stringify!(rpc_routine_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<rpc_routine_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(rpc_routine_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_descriptor>())).impl_routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_descriptor),
            "::",
            stringify!(impl_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_descriptor>())).stub_routine as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_descriptor),
            "::",
            stringify!(stub_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_routine_descriptor>())).argc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_descriptor),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_descriptor>())).descr_count as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_descriptor),
            "::",
            stringify!(descr_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_descriptor>())).arg_descr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_descriptor),
            "::",
            stringify!(arg_descr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rpc_routine_descriptor>())).max_reply_msg as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_routine_descriptor),
            "::",
            stringify!(max_reply_msg)
        )
    );
}
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_rpc_signature() {
    assert_eq!(
        ::std::mem::size_of::<rpc_signature>(),
        56usize,
        concat!("Size of: ", stringify!(rpc_signature))
    );
    assert_eq!(
        ::std::mem::align_of::<rpc_signature>(),
        8usize,
        concat!("Alignment of ", stringify!(rpc_signature))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_signature>())).rd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_signature),
            "::",
            stringify!(rd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_signature>())).rad as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_signature),
            "::",
            stringify!(rad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_rpc_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<rpc_subsystem>(),
        88usize,
        concat!("Size of: ", stringify!(rpc_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<rpc_subsystem>(),
        8usize,
        concat!("Alignment of ", stringify!(rpc_subsystem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).maxsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(maxsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).base_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).routine as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpc_subsystem>())).arg_descriptor as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rpc_subsystem),
            "::",
            stringify!(arg_descriptor)
        )
    );
}
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mach_error(str: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn safe_gets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type string_t = *const ::std::os::raw::c_char;
extern "C" {
    pub fn clock_get_time(
        clock_serv: clock_serv_t,
        cur_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_get_attributes(
        clock_serv: clock_serv_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_alarm(
        clock_serv: clock_serv_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
        alarm_port: clock_reply_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_time_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__clock_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__clock_get_time_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__clock_get_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__clock_get_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__clock_get_time_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_get_time_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_get_time_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__clock_get_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__clock_get_attributes_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__clock_get_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__clock_get_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__clock_get_attributes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_get_attributes_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_get_attributes_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_get_attributes_t>())).flavor as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_get_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_get_attributes_t>())).clock_attrCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_get_attributes_t),
            "::",
            stringify!(clock_attrCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub alarm_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[test]
fn bindgen_test_layout___Request__clock_alarm_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__clock_alarm_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__clock_alarm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__clock_alarm_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__clock_alarm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__clock_alarm_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_t>())).alarm_port as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_t),
            "::",
            stringify!(alarm_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__clock_alarm_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_t>())).alarm_type as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_t),
            "::",
            stringify!(alarm_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_t>())).alarm_time as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_t),
            "::",
            stringify!(alarm_time)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_subsystem {
    pub Request_clock_get_time: __Request__clock_get_time_t,
    pub Request_clock_get_attributes: __Request__clock_get_attributes_t,
    pub Request_clock_alarm: __Request__clock_alarm_t,
    _bindgen_union_align: [u32; 15usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__clock_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__clock_subsystem>(),
        60usize,
        concat!("Size of: ", stringify!(__RequestUnion__clock_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__clock_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__RequestUnion__clock_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__clock_subsystem>())).Request_clock_get_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__clock_subsystem),
            "::",
            stringify!(Request_clock_get_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__clock_subsystem>())).Request_clock_get_attributes
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__clock_subsystem),
            "::",
            stringify!(Request_clock_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__clock_subsystem>())).Request_clock_alarm
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__clock_subsystem),
            "::",
            stringify!(Request_clock_alarm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub cur_time: mach_timespec_t,
}
#[test]
fn bindgen_test_layout___Reply__clock_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__clock_get_time_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__clock_get_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__clock_get_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__clock_get_time_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_get_time_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_time_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_get_time_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_time_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_time_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_time_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_time_t>())).cur_time as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_time_t),
            "::",
            stringify!(cur_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[test]
fn bindgen_test_layout___Reply__clock_get_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__clock_get_attributes_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__clock_get_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__clock_get_attributes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__clock_get_attributes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_attributes_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_attributes_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_attributes_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_attributes_t>())).clock_attrCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_attributes_t),
            "::",
            stringify!(clock_attrCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_get_attributes_t>())).clock_attr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_get_attributes_t),
            "::",
            stringify!(clock_attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__clock_alarm_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__clock_alarm_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__clock_alarm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__clock_alarm_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__clock_alarm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_alarm_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_alarm_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_alarm_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_alarm_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__clock_alarm_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_alarm_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_subsystem {
    pub Reply_clock_get_time: __Reply__clock_get_time_t,
    pub Reply_clock_get_attributes: __Reply__clock_get_attributes_t,
    pub Reply_clock_alarm: __Reply__clock_alarm_t,
    _bindgen_union_align: [u32; 11usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__clock_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__clock_subsystem>(),
        44usize,
        concat!("Size of: ", stringify!(__ReplyUnion__clock_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__clock_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__ReplyUnion__clock_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__clock_subsystem>())).Reply_clock_get_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__clock_subsystem),
            "::",
            stringify!(Reply_clock_get_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__clock_subsystem>())).Reply_clock_get_attributes
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__clock_subsystem),
            "::",
            stringify!(Reply_clock_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__clock_subsystem>())).Reply_clock_alarm as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__clock_subsystem),
            "::",
            stringify!(Reply_clock_alarm)
        )
    );
}
extern "C" {
    pub fn clock_alarm_reply(
        alarm_port: clock_reply_t,
        alarm_portPoly: mach_msg_type_name_t,
        alarm_code: kern_return_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub alarm_code: kern_return_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[test]
fn bindgen_test_layout___Request__clock_alarm_reply_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__clock_alarm_reply_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__clock_alarm_reply_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__clock_alarm_reply_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__clock_alarm_reply_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_reply_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_reply_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_reply_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_reply_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_reply_t>())).alarm_code as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_reply_t),
            "::",
            stringify!(alarm_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_reply_t>())).alarm_type as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_reply_t),
            "::",
            stringify!(alarm_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__clock_alarm_reply_t>())).alarm_time as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__clock_alarm_reply_t),
            "::",
            stringify!(alarm_time)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_reply_subsystem {
    pub Request_clock_alarm_reply: __Request__clock_alarm_reply_t,
    _bindgen_union_align: [u32; 12usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__clock_reply_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__clock_reply_subsystem>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__clock_reply_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__clock_reply_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__clock_reply_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__clock_reply_subsystem>()))
                .Request_clock_alarm_reply as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__clock_reply_subsystem),
            "::",
            stringify!(Request_clock_alarm_reply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__clock_alarm_reply_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__clock_alarm_reply_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__clock_alarm_reply_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__clock_alarm_reply_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__clock_alarm_reply_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_alarm_reply_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_alarm_reply_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_alarm_reply_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_alarm_reply_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__clock_alarm_reply_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__clock_alarm_reply_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_reply_subsystem {
    pub Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t,
    _bindgen_union_align: [u32; 9usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__clock_reply_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__clock_reply_subsystem>(),
        36usize,
        concat!("Size of: ", stringify!(__ReplyUnion__clock_reply_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__clock_reply_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__clock_reply_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__clock_reply_subsystem>())).Reply_clock_alarm_reply
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__clock_reply_subsystem),
            "::",
            stringify!(Reply_clock_alarm_reply)
        )
    );
}
extern "C" {
    pub fn exception_raise(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state(
        exception_port: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state_identity(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
}
#[test]
fn bindgen_test_layout___Request__exception_raise_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__exception_raise_t>(),
        76usize,
        concat!("Size of: ", stringify!(__Request__exception_raise_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__exception_raise_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__exception_raise_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).thread as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).task as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).NDR as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).exception as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).codeCnt as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(codeCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_t>())).code as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_t),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Request__exception_raise_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__exception_raise_state_t>(),
        5240usize,
        concat!("Size of: ", stringify!(__Request__exception_raise_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__exception_raise_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__exception_raise_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).exception as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).codeCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(codeCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).code as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).flavor as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).old_stateCnt as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_t>())).old_state as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_t),
            "::",
            stringify!(old_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Request__exception_raise_state_identity_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__exception_raise_state_identity_t>(),
        5268usize,
        concat!(
            "Size of: ",
            stringify!(__Request__exception_raise_state_identity_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__exception_raise_state_identity_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__exception_raise_state_identity_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).thread
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).task as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).NDR as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).exception
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).codeCnt
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(codeCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).code as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).flavor
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).old_stateCnt
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(old_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__exception_raise_state_identity_t>())).old_state
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__exception_raise_state_identity_t),
            "::",
            stringify!(old_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__exc_subsystem {
    pub Request_exception_raise: __Request__exception_raise_t,
    pub Request_exception_raise_state: __Request__exception_raise_state_t,
    pub Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t,
    _bindgen_union_align: [u32; 1317usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__exc_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__exc_subsystem>(),
        5268usize,
        concat!("Size of: ", stringify!(__RequestUnion__exc_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__exc_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__RequestUnion__exc_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__exc_subsystem>())).Request_exception_raise
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__exc_subsystem),
            "::",
            stringify!(Request_exception_raise)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__exc_subsystem>())).Request_exception_raise_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__exc_subsystem),
            "::",
            stringify!(Request_exception_raise_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__exc_subsystem>()))
                .Request_exception_raise_state_identity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__exc_subsystem),
            "::",
            stringify!(Request_exception_raise_state_identity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__exception_raise_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__exception_raise_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__exception_raise_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__exception_raise_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__exception_raise_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__exception_raise_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__exception_raise_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Reply__exception_raise_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__exception_raise_state_t>(),
        5228usize,
        concat!("Size of: ", stringify!(__Reply__exception_raise_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__exception_raise_state_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__exception_raise_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_t>())).flavor as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_t>())).new_stateCnt as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_t),
            "::",
            stringify!(new_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_t>())).new_state as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_t),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[test]
fn bindgen_test_layout___Reply__exception_raise_state_identity_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__exception_raise_state_identity_t>(),
        5228usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__exception_raise_state_identity_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__exception_raise_state_identity_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__exception_raise_state_identity_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_identity_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_identity_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_identity_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_identity_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_identity_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_identity_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_identity_t>())).flavor as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_identity_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_identity_t>())).new_stateCnt
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_identity_t),
            "::",
            stringify!(new_stateCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__exception_raise_state_identity_t>())).new_state
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__exception_raise_state_identity_t),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__exc_subsystem {
    pub Reply_exception_raise: __Reply__exception_raise_t,
    pub Reply_exception_raise_state: __Reply__exception_raise_state_t,
    pub Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t,
    _bindgen_union_align: [u32; 1307usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__exc_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__exc_subsystem>(),
        5228usize,
        concat!("Size of: ", stringify!(__ReplyUnion__exc_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__exc_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__ReplyUnion__exc_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__exc_subsystem>())).Reply_exception_raise
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__exc_subsystem),
            "::",
            stringify!(Reply_exception_raise)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__exc_subsystem>())).Reply_exception_raise_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__exc_subsystem),
            "::",
            stringify!(Reply_exception_raise_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__exc_subsystem>()))
                .Reply_exception_raise_state_identity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__exc_subsystem),
            "::",
            stringify!(Reply_exception_raise_state_identity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
#[test]
fn bindgen_test_layout_mach_timebase_info() {
    assert_eq!(
        ::std::mem::size_of::<mach_timebase_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timebase_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timebase_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timebase_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_timebase_info>())).numer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timebase_info),
            "::",
            stringify!(numer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_timebase_info>())).denom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timebase_info),
            "::",
            stringify!(denom)
        )
    );
}
pub type mach_timebase_info_t = *mut mach_timebase_info;
pub type mach_timebase_info_data_t = mach_timebase_info;
extern "C" {
    pub fn mach_timebase_info(info: mach_timebase_info_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_wait_until(deadline: u64) -> kern_return_t;
}
extern "C" {
    pub fn mach_absolute_time() -> u64;
}
extern "C" {
    pub fn mach_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_vm_allocate(
        target: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_deallocate(
        target: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_protect(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_inherit(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut mach_vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_write(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_copy(
        target_task: vm_map_t,
        source_address: mach_vm_address_t,
        size: mach_vm_size_t,
        dest_address: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_overwrite(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: mach_vm_address_t,
        outsize: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_msync(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_behavior_set(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_map(
        target_task: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_machine_attribute(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_query(
        target_map: vm_map_read_t,
        offset: mach_vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_handle: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_purgable_control(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_info(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        flavor: vm_page_info_flavor_t,
        info: vm_page_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_range_query(
        target_map: vm_map_read_t,
        address: mach_vm_offset_t,
        size: mach_vm_size_t,
        dispositions: mach_vm_address_t,
        dispositions_count: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_allocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_allocate_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_allocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_allocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_allocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_allocate_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_allocate_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_allocate_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_allocate_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_allocate_t>())).flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_allocate_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_deallocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_deallocate_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_deallocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_deallocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_deallocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_deallocate_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_deallocate_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_deallocate_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_deallocate_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_protect_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_protect_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_protect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_protect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_protect_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_protect_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_protect_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_protect_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_protect_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_protect_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_protect_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_protect_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_protect_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_protect_t>())).set_maximum as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_protect_t),
            "::",
            stringify!(set_maximum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_protect_t>())).new_protection as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_protect_t),
            "::",
            stringify!(new_protection)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_inherit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_inherit_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_inherit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_inherit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_inherit_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_inherit_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_inherit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_inherit_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_inherit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_inherit_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_inherit_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_inherit_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_inherit_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_inherit_t>())).new_inheritance as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_inherit_t),
            "::",
            stringify!(new_inheritance)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_read_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_read_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_read_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_read_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_read_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_read_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_read_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: mach_vm_read_entry_t,
    pub count: natural_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_read_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_read_list_t>(),
        4132usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_read_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_read_list_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_read_list_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_list_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_list_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_list_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_list_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_list_t>())).data_list as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_list_t),
            "::",
            stringify!(data_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_list_t>())).count as *const _ as usize
        },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_list_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_write_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_write_t>(),
        64usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_write_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_write_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_write_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_write_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_write_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_write_t>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_write_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_write_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_write_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_write_t>())).address as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_write_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_write_t>())).dataCnt as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_write_t),
            "::",
            stringify!(dataCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub dest_address: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_copy_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_copy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_copy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_copy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_copy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_copy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_copy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_copy_t>())).source_address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_copy_t),
            "::",
            stringify!(source_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_copy_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_copy_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_copy_t>())).dest_address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_copy_t),
            "::",
            stringify!(dest_address)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub data: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_read_overwrite_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_read_overwrite_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_read_overwrite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_read_overwrite_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_read_overwrite_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_overwrite_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_overwrite_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_overwrite_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_overwrite_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_overwrite_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_overwrite_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_overwrite_t>())).size as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_overwrite_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_read_overwrite_t>())).data as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_read_overwrite_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_msync_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_msync_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_msync_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_msync_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_msync_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_msync_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_msync_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_msync_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_msync_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_msync_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_msync_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_msync_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_msync_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_msync_t>())).sync_flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_msync_t),
            "::",
            stringify!(sync_flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_behavior_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_behavior_set_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_behavior_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_behavior_set_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_behavior_set_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_behavior_set_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_behavior_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_behavior_set_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_behavior_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_behavior_set_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_behavior_set_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_behavior_set_t>())).size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_behavior_set_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_behavior_set_t>())).new_behavior as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_behavior_set_t),
            "::",
            stringify!(new_behavior)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_map_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_map_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).object as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).mask as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).offset as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).copy as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).cur_protection as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(cur_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).max_protection as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_map_t>())).inheritance as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_map_t),
            "::",
            stringify!(inheritance)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_machine_attribute_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_machine_attribute_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_vm_machine_attribute_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_machine_attribute_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_machine_attribute_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_machine_attribute_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_machine_attribute_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_machine_attribute_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_machine_attribute_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_machine_attribute_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_machine_attribute_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_machine_attribute_t>())).size as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_machine_attribute_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_machine_attribute_t>())).attribute as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_machine_attribute_t),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_machine_attribute_t>())).value as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_machine_attribute_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_remap_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_remap_t>(),
        92usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_remap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_remap_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_remap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).src_task as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(src_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).target_address as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(target_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).mask as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).flags as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).src_address as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(src_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).copy as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_remap_t>())).inheritance as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_remap_t),
            "::",
            stringify!(inheritance)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: mach_vm_offset_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_page_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_page_query_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_page_query_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_page_query_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_page_query_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_query_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_query_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_query_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_query_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_query_t>())).offset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_query_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_region_recurse_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_region_recurse_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_region_recurse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_region_recurse_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_region_recurse_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_recurse_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_recurse_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_recurse_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_recurse_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_recurse_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_recurse_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_recurse_t>())).nesting_depth
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_recurse_t),
            "::",
            stringify!(nesting_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_recurse_t>())).infoCnt as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_recurse_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_region_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_region_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_region_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Request__mach_vm_region_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_t>())).flavor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_region_t>())).infoCnt as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_region_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Request___mach_make_memory_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request___mach_make_memory_entry_t>(),
        68usize,
        concat!(
            "Size of: ",
            stringify!(__Request___mach_make_memory_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request___mach_make_memory_entry_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request___mach_make_memory_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).parent_handle
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(parent_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).size as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).offset as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request___mach_make_memory_entry_t>())).permission as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request___mach_make_memory_entry_t),
            "::",
            stringify!(permission)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_purgable_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_purgable_control_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_vm_purgable_control_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_purgable_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_purgable_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_purgable_control_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_purgable_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_purgable_control_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_purgable_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_purgable_control_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_purgable_control_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_purgable_control_t>())).control as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_purgable_control_t),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_purgable_control_t>())).state as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_purgable_control_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_page_info_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_page_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_page_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_vm_page_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_page_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_vm_page_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_info_t>())).address as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_info_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_info_t>())).flavor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_info_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_info_t>())).infoCnt as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_info_t),
            "::",
            stringify!(infoCnt)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_offset_t,
    pub size: mach_vm_size_t,
    pub dispositions: mach_vm_address_t,
    pub dispositions_count: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout___Request__mach_vm_page_range_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_vm_page_range_query_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_vm_page_range_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_vm_page_range_query_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_vm_page_range_query_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_range_query_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_range_query_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_range_query_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_range_query_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_range_query_t>())).address as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_range_query_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_range_query_t>())).size as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_range_query_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_range_query_t>())).dispositions
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_range_query_t),
            "::",
            stringify!(dispositions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_vm_page_range_query_t>())).dispositions_count
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_vm_page_range_query_t),
            "::",
            stringify!(dispositions_count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_vm_subsystem {
    pub Request_mach_vm_allocate: __Request__mach_vm_allocate_t,
    pub Request_mach_vm_deallocate: __Request__mach_vm_deallocate_t,
    pub Request_mach_vm_protect: __Request__mach_vm_protect_t,
    pub Request_mach_vm_inherit: __Request__mach_vm_inherit_t,
    pub Request_mach_vm_read: __Request__mach_vm_read_t,
    pub Request_mach_vm_read_list: __Request__mach_vm_read_list_t,
    pub Request_mach_vm_write: __Request__mach_vm_write_t,
    pub Request_mach_vm_copy: __Request__mach_vm_copy_t,
    pub Request_mach_vm_read_overwrite: __Request__mach_vm_read_overwrite_t,
    pub Request_mach_vm_msync: __Request__mach_vm_msync_t,
    pub Request_mach_vm_behavior_set: __Request__mach_vm_behavior_set_t,
    pub Request_mach_vm_map: __Request__mach_vm_map_t,
    pub Request_mach_vm_machine_attribute: __Request__mach_vm_machine_attribute_t,
    pub Request_mach_vm_remap: __Request__mach_vm_remap_t,
    pub Request_mach_vm_page_query: __Request__mach_vm_page_query_t,
    pub Request_mach_vm_region_recurse: __Request__mach_vm_region_recurse_t,
    pub Request_mach_vm_region: __Request__mach_vm_region_t,
    pub Request__mach_make_memory_entry: __Request___mach_make_memory_entry_t,
    pub Request_mach_vm_purgable_control: __Request__mach_vm_purgable_control_t,
    pub Request_mach_vm_page_info: __Request__mach_vm_page_info_t,
    pub Request_mach_vm_page_range_query: __Request__mach_vm_page_range_query_t,
    _bindgen_union_align: [u32; 1033usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__mach_vm_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__mach_vm_subsystem>(),
        4132usize,
        concat!("Size of: ", stringify!(__RequestUnion__mach_vm_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__mach_vm_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__mach_vm_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_allocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_deallocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_protect
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_protect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_inherit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_inherit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_read
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_read_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_read_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_write
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_copy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request_mach_vm_read_overwrite as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_read_overwrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_msync
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_msync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request_mach_vm_behavior_set as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_behavior_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_map
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request_mach_vm_machine_attribute as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_machine_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_remap
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_remap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_page_query
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_page_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request_mach_vm_region_recurse as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_region_recurse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_region
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request__mach_make_memory_entry as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request__mach_make_memory_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request_mach_vm_purgable_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_purgable_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>())).Request_mach_vm_page_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_page_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_vm_subsystem>()))
                .Request_mach_vm_page_range_query as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_vm_subsystem),
            "::",
            stringify!(Request_mach_vm_page_range_query)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_allocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_allocate_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_allocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_allocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_allocate_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_allocate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_allocate_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_allocate_t>())).address as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_allocate_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_deallocate_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_deallocate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_deallocate_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_deallocate_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_deallocate_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_deallocate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_protect_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_protect_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_protect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_protect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_protect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_protect_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_protect_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_protect_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_protect_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_protect_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_protect_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_inherit_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_inherit_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_inherit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_inherit_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_inherit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_inherit_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_inherit_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_inherit_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_inherit_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_inherit_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_inherit_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_read_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_read_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_read_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_read_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_read_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_read_t>())).data as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_read_t>())).NDR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_read_t>())).dataCnt as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_t),
            "::",
            stringify!(dataCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: mach_vm_read_entry_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_read_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_read_list_t>(),
        4132usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_read_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_read_list_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_read_list_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_list_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_list_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_list_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_list_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_list_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_list_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_list_t>())).data_list as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_list_t),
            "::",
            stringify!(data_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_write_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_write_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_write_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_write_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_write_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_write_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_write_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_write_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_write_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_copy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_copy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_copy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_copy_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_copy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_copy_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_copy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_copy_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_copy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_read_overwrite_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_read_overwrite_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_read_overwrite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_read_overwrite_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_vm_read_overwrite_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_overwrite_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_overwrite_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_overwrite_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_overwrite_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_overwrite_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_overwrite_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_read_overwrite_t>())).outsize as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_read_overwrite_t),
            "::",
            stringify!(outsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_msync_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_msync_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_msync_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_msync_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_msync_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_msync_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_msync_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_msync_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_msync_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_msync_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_msync_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_behavior_set_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_behavior_set_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_behavior_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_behavior_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_behavior_set_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_behavior_set_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_behavior_set_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_behavior_set_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_behavior_set_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_behavior_set_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_behavior_set_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_map_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_map_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_map_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_map_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_map_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_map_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_map_t>())).RetCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_map_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_map_t>())).address as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_map_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_machine_attribute_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_machine_attribute_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_vm_machine_attribute_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_machine_attribute_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_vm_machine_attribute_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_machine_attribute_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_machine_attribute_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_machine_attribute_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_machine_attribute_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_machine_attribute_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_machine_attribute_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_machine_attribute_t>())).value as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_machine_attribute_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_remap_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_remap_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_remap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_remap_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_remap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_remap_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_remap_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_remap_t>())).NDR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_remap_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_remap_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_remap_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_remap_t>())).target_address as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_remap_t),
            "::",
            stringify!(target_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_remap_t>())).cur_protection as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_remap_t),
            "::",
            stringify!(cur_protection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_remap_t>())).max_protection as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_remap_t),
            "::",
            stringify!(max_protection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_page_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_page_query_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_page_query_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_page_query_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_page_query_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_query_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_query_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_query_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_query_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_query_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_query_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_query_t>())).disposition as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_query_t),
            "::",
            stringify!(disposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_query_t>())).ref_count as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_query_t),
            "::",
            stringify!(ref_count)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_region_recurse_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_region_recurse_t>(),
        136usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_region_recurse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_region_recurse_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_vm_region_recurse_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).address as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).size as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).nesting_depth as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(nesting_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).infoCnt as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_recurse_t>())).info as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_recurse_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_region_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_region_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_region_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).Head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).msgh_body as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).object_name as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(object_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).NDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).address as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).infoCnt as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__Reply__mach_vm_region_t>())).info as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_region_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[test]
fn bindgen_test_layout___Reply___mach_make_memory_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply___mach_make_memory_entry_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply___mach_make_memory_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply___mach_make_memory_entry_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply___mach_make_memory_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___mach_make_memory_entry_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___mach_make_memory_entry_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___mach_make_memory_entry_t>())).msgh_body as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___mach_make_memory_entry_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___mach_make_memory_entry_t>())).object_handle as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___mach_make_memory_entry_t),
            "::",
            stringify!(object_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___mach_make_memory_entry_t>())).NDR as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___mach_make_memory_entry_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply___mach_make_memory_entry_t>())).size as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply___mach_make_memory_entry_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_purgable_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_purgable_control_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_purgable_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_purgable_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_vm_purgable_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_purgable_control_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_purgable_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_purgable_control_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_purgable_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_purgable_control_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_purgable_control_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_purgable_control_t>())).state as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_purgable_control_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 32usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_page_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_page_info_t>(),
        168usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_page_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_page_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_vm_page_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_info_t>())).RetCode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_info_t>())).infoCnt as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_info_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_info_t>())).info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_info_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dispositions_count: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_vm_page_range_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_vm_page_range_query_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_vm_page_range_query_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_vm_page_range_query_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_vm_page_range_query_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_range_query_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_range_query_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_range_query_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_range_query_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_range_query_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_range_query_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_vm_page_range_query_t>())).dispositions_count
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_vm_page_range_query_t),
            "::",
            stringify!(dispositions_count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_vm_subsystem {
    pub Reply_mach_vm_allocate: __Reply__mach_vm_allocate_t,
    pub Reply_mach_vm_deallocate: __Reply__mach_vm_deallocate_t,
    pub Reply_mach_vm_protect: __Reply__mach_vm_protect_t,
    pub Reply_mach_vm_inherit: __Reply__mach_vm_inherit_t,
    pub Reply_mach_vm_read: __Reply__mach_vm_read_t,
    pub Reply_mach_vm_read_list: __Reply__mach_vm_read_list_t,
    pub Reply_mach_vm_write: __Reply__mach_vm_write_t,
    pub Reply_mach_vm_copy: __Reply__mach_vm_copy_t,
    pub Reply_mach_vm_read_overwrite: __Reply__mach_vm_read_overwrite_t,
    pub Reply_mach_vm_msync: __Reply__mach_vm_msync_t,
    pub Reply_mach_vm_behavior_set: __Reply__mach_vm_behavior_set_t,
    pub Reply_mach_vm_map: __Reply__mach_vm_map_t,
    pub Reply_mach_vm_machine_attribute: __Reply__mach_vm_machine_attribute_t,
    pub Reply_mach_vm_remap: __Reply__mach_vm_remap_t,
    pub Reply_mach_vm_page_query: __Reply__mach_vm_page_query_t,
    pub Reply_mach_vm_region_recurse: __Reply__mach_vm_region_recurse_t,
    pub Reply_mach_vm_region: __Reply__mach_vm_region_t,
    pub Reply__mach_make_memory_entry: __Reply___mach_make_memory_entry_t,
    pub Reply_mach_vm_purgable_control: __Reply__mach_vm_purgable_control_t,
    pub Reply_mach_vm_page_info: __Reply__mach_vm_page_info_t,
    pub Reply_mach_vm_page_range_query: __Reply__mach_vm_page_range_query_t,
    _bindgen_union_align: [u32; 1033usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__mach_vm_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__mach_vm_subsystem>(),
        4132usize,
        concat!("Size of: ", stringify!(__ReplyUnion__mach_vm_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__mach_vm_subsystem>(),
        4usize,
        concat!("Alignment of ", stringify!(__ReplyUnion__mach_vm_subsystem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_allocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_deallocate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_protect
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_protect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_inherit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_inherit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_read
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_read_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_read_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_write
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_copy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_read_overwrite
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_read_overwrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_msync
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_msync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_behavior_set
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_behavior_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_map
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>()))
                .Reply_mach_vm_machine_attribute as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_machine_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_remap
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_remap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_page_query
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_page_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_region_recurse
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_region_recurse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_region
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_region)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>()))
                .Reply__mach_make_memory_entry as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply__mach_make_memory_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>()))
                .Reply_mach_vm_purgable_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_purgable_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>())).Reply_mach_vm_page_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_page_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_vm_subsystem>()))
                .Reply_mach_vm_page_range_query as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_vm_subsystem),
            "::",
            stringify!(Reply_mach_vm_page_range_query)
        )
    );
}
extern "C" {
    pub fn mach_voucher_extract_attr_content(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        content: mach_voucher_attr_content_t,
        contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipeCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_all_attr_recipes(
        voucher: ipc_voucher_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_attr_command(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        command: mach_voucher_attr_command_t,
        in_content: mach_voucher_attr_content_t,
        in_contentCnt: mach_msg_type_number_t,
        out_content: mach_voucher_attr_content_t,
        out_contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_debug_info(
        task: ipc_space_t,
        voucher_name: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub contentCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_voucher_extract_attr_content_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_voucher_extract_attr_content_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_voucher_extract_attr_content_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_voucher_extract_attr_content_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_voucher_extract_attr_content_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_content_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_content_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_content_t>())).key
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_content_t>())).contentCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(contentCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub recipeCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_voucher_extract_attr_recipe_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_voucher_extract_attr_recipe_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_voucher_extract_attr_recipe_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_voucher_extract_attr_recipe_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_voucher_extract_attr_recipe_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_recipe_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_recipe_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_recipe_t>())).key
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_attr_recipe_t>())).recipeCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(recipeCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_voucher_extract_all_attr_recipes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_voucher_extract_all_attr_recipes_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_voucher_extract_all_attr_recipes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_voucher_extract_all_attr_recipes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_voucher_extract_all_attr_recipes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_all_attr_recipes_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_all_attr_recipes_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_extract_all_attr_recipes_t>()))
                .recipesCnt as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(recipesCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Request__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_command_t,
    pub in_contentCnt: mach_msg_type_number_t,
    pub in_content: [u8; 4096usize],
    pub out_contentCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_voucher_attr_command_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_voucher_attr_command_t>(),
        4144usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_voucher_attr_command_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_voucher_attr_command_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_voucher_attr_command_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).key as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).command as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).in_contentCnt
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(in_contentCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).in_content
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(in_content)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_attr_command_t>())).out_contentCnt
                as *const _ as usize
        },
        4140usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_attr_command_t),
            "::",
            stringify!(out_contentCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub voucher_name: mach_port_name_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_voucher_debug_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_voucher_debug_info_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_voucher_debug_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_voucher_debug_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_voucher_debug_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_debug_info_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_debug_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_debug_info_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_debug_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_debug_info_t>())).voucher_name
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_debug_info_t),
            "::",
            stringify!(voucher_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_voucher_debug_info_t>())).recipesCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_voucher_debug_info_t),
            "::",
            stringify!(recipesCnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_voucher_subsystem {
    pub Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t,
    pub Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t,
    pub Request_mach_voucher_extract_all_attr_recipes:
        __Request__mach_voucher_extract_all_attr_recipes_t,
    pub Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t,
    pub Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t,
    _bindgen_union_align: [u32; 1036usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__mach_voucher_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__mach_voucher_subsystem>(),
        4144usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__mach_voucher_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__mach_voucher_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__mach_voucher_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_voucher_subsystem>()))
                .Request_mach_voucher_extract_attr_content as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_voucher_subsystem),
            "::",
            stringify!(Request_mach_voucher_extract_attr_content)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_voucher_subsystem>()))
                .Request_mach_voucher_extract_attr_recipe as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_voucher_subsystem),
            "::",
            stringify!(Request_mach_voucher_extract_attr_recipe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_voucher_subsystem>()))
                .Request_mach_voucher_extract_all_attr_recipes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_voucher_subsystem),
            "::",
            stringify!(Request_mach_voucher_extract_all_attr_recipes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_voucher_subsystem>()))
                .Request_mach_voucher_attr_command as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_voucher_subsystem),
            "::",
            stringify!(Request_mach_voucher_attr_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__mach_voucher_subsystem>()))
                .Request_mach_voucher_debug_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_voucher_subsystem),
            "::",
            stringify!(Request_mach_voucher_debug_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub contentCnt: mach_msg_type_number_t,
    pub content: [u8; 4096usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_voucher_extract_attr_content_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_voucher_extract_attr_content_t>(),
        4136usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_voucher_extract_attr_content_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_content_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_content_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_content_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_content_t>())).contentCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(contentCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_content_t>())).content
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_content_t),
            "::",
            stringify!(content)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipeCnt: mach_msg_type_number_t,
    pub recipe: [u8; 4096usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_voucher_extract_attr_recipe_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_voucher_extract_attr_recipe_t>(),
        4136usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_voucher_extract_attr_recipe_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_recipe_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_recipe_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_recipe_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_recipe_t>())).recipeCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(recipeCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_attr_recipe_t>())).recipe
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_attr_recipe_t),
            "::",
            stringify!(recipe)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_voucher_extract_all_attr_recipes_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_voucher_extract_all_attr_recipes_t>(),
        5160usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_voucher_extract_all_attr_recipes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_all_attr_recipes_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_all_attr_recipes_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_all_attr_recipes_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_all_attr_recipes_t>())).recipesCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(recipesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_extract_all_attr_recipes_t>())).recipes
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_extract_all_attr_recipes_t),
            "::",
            stringify!(recipes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_contentCnt: mach_msg_type_number_t,
    pub out_content: [u8; 4096usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_voucher_attr_command_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_voucher_attr_command_t>(),
        4136usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_voucher_attr_command_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_voucher_attr_command_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_voucher_attr_command_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_attr_command_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_attr_command_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_attr_command_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_attr_command_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_attr_command_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_attr_command_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_attr_command_t>())).out_contentCnt
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_attr_command_t),
            "::",
            stringify!(out_contentCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_attr_command_t>())).out_content as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_attr_command_t),
            "::",
            stringify!(out_content)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __Reply__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_voucher_debug_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_voucher_debug_info_t>(),
        5160usize,
        concat!("Size of: ", stringify!(__Reply__mach_voucher_debug_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_voucher_debug_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_voucher_debug_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_debug_info_t>())).Head as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_debug_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_debug_info_t>())).NDR as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_debug_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_debug_info_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_debug_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_debug_info_t>())).recipesCnt as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_debug_info_t),
            "::",
            stringify!(recipesCnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_voucher_debug_info_t>())).recipes as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_voucher_debug_info_t),
            "::",
            stringify!(recipes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_voucher_subsystem {
    pub Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t,
    pub Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t,
    pub Reply_mach_voucher_extract_all_attr_recipes:
        __Reply__mach_voucher_extract_all_attr_recipes_t,
    pub Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t,
    pub Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t,
    _bindgen_union_align: [u32; 1290usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__mach_voucher_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__mach_voucher_subsystem>(),
        5160usize,
        concat!(
            "Size of: ",
            stringify!(__ReplyUnion__mach_voucher_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__mach_voucher_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__mach_voucher_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_voucher_subsystem>()))
                .Reply_mach_voucher_extract_attr_content as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_voucher_subsystem),
            "::",
            stringify!(Reply_mach_voucher_extract_attr_content)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_voucher_subsystem>()))
                .Reply_mach_voucher_extract_attr_recipe as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_voucher_subsystem),
            "::",
            stringify!(Reply_mach_voucher_extract_attr_recipe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_voucher_subsystem>()))
                .Reply_mach_voucher_extract_all_attr_recipes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_voucher_subsystem),
            "::",
            stringify!(Reply_mach_voucher_extract_all_attr_recipes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_voucher_subsystem>()))
                .Reply_mach_voucher_attr_command as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_voucher_subsystem),
            "::",
            stringify!(Reply_mach_voucher_attr_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__mach_voucher_subsystem>()))
                .Reply_mach_voucher_debug_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_voucher_subsystem),
            "::",
            stringify!(Reply_mach_voucher_debug_info)
        )
    );
}
extern "C" {
    pub fn mach_memory_entry_purgable_control(
        mem_entry: mem_entry_name_port_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_access_tracking(
        mem_entry: mem_entry_name_port_t,
        access_tracking: *mut ::std::os::raw::c_int,
        access_tracking_reads: *mut u32,
        access_tracking_writes: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_ownership(
        mem_entry: mem_entry_name_port_t,
        owner: task_t,
        ledger_tag: ::std::os::raw::c_int,
        ledger_flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__mach_memory_entry_purgable_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_memory_entry_purgable_control_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_memory_entry_purgable_control_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_memory_entry_purgable_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_memory_entry_purgable_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_purgable_control_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_purgable_control_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_purgable_control_t>())).control
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_purgable_control_t>())).state
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub access_tracking: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__mach_memory_entry_access_tracking_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_memory_entry_access_tracking_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_memory_entry_access_tracking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_memory_entry_access_tracking_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_memory_entry_access_tracking_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_access_tracking_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_access_tracking_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_access_tracking_t>()))
                .access_tracking as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(access_tracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub owner: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledger_tag: ::std::os::raw::c_int,
    pub ledger_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__mach_memory_entry_ownership_t() {
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_memory_entry_ownership_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_memory_entry_ownership_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_memory_entry_ownership_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_memory_entry_ownership_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_ownership_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_ownership_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_ownership_t>())).msgh_body
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_ownership_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_ownership_t>())).owner as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_ownership_t),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_ownership_t>())).NDR as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_ownership_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_ownership_t>())).ledger_tag
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_ownership_t),
            "::",
            stringify!(ledger_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Request__mach_memory_entry_ownership_t>())).ledger_flags
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_memory_entry_ownership_t),
            "::",
            stringify!(ledger_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__memory_entry_subsystem {
    pub Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t,
    pub Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t,
    pub Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t,
    _bindgen_union_align: [u32; 14usize],
}
#[test]
fn bindgen_test_layout___RequestUnion__memory_entry_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__memory_entry_subsystem>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__RequestUnion__memory_entry_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__memory_entry_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__memory_entry_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__memory_entry_subsystem>()))
                .Request_mach_memory_entry_purgable_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__memory_entry_subsystem),
            "::",
            stringify!(Request_mach_memory_entry_purgable_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__memory_entry_subsystem>()))
                .Request_mach_memory_entry_access_tracking as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__memory_entry_subsystem),
            "::",
            stringify!(Request_mach_memory_entry_access_tracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__RequestUnion__memory_entry_subsystem>()))
                .Request_mach_memory_entry_ownership as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__memory_entry_subsystem),
            "::",
            stringify!(Request_mach_memory_entry_ownership)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Reply__mach_memory_entry_purgable_control_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_memory_entry_purgable_control_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_memory_entry_purgable_control_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_memory_entry_purgable_control_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_memory_entry_purgable_control_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_purgable_control_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_purgable_control_t>())).NDR
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_purgable_control_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_purgable_control_t>())).state
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_purgable_control_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub access_tracking: ::std::os::raw::c_int,
    pub access_tracking_reads: u32,
    pub access_tracking_writes: u32,
}
#[test]
fn bindgen_test_layout___Reply__mach_memory_entry_access_tracking_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_memory_entry_access_tracking_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_memory_entry_access_tracking_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_access_tracking_t>())).Head
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_access_tracking_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_access_tracking_t>())).RetCode
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_access_tracking_t>())).access_tracking
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(access_tracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_access_tracking_t>()))
                .access_tracking_reads as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(access_tracking_reads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_access_tracking_t>()))
                .access_tracking_writes as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_access_tracking_t),
            "::",
            stringify!(access_tracking_writes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_memory_entry_ownership_t() {
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_memory_entry_ownership_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_memory_entry_ownership_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_memory_entry_ownership_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_memory_entry_ownership_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_ownership_t>())).Head as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_ownership_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_ownership_t>())).NDR as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_ownership_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__Reply__mach_memory_entry_ownership_t>())).RetCode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_memory_entry_ownership_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__memory_entry_subsystem {
    pub Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t,
    pub Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t,
    pub Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t,
    _bindgen_union_align: [u32; 12usize],
}
#[test]
fn bindgen_test_layout___ReplyUnion__memory_entry_subsystem() {
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__memory_entry_subsystem>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(__ReplyUnion__memory_entry_subsystem)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__memory_entry_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__memory_entry_subsystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__memory_entry_subsystem>()))
                .Reply_mach_memory_entry_purgable_control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__memory_entry_subsystem),
            "::",
            stringify!(Reply_mach_memory_entry_purgable_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__memory_entry_subsystem>()))
                .Reply_mach_memory_entry_access_tracking as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__memory_entry_subsystem),
            "::",
            stringify!(Reply_mach_memory_entry_access_tracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ReplyUnion__memory_entry_subsystem>()))
                .Reply_mach_memory_entry_ownership as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__memory_entry_subsystem),
            "::",
            stringify!(Reply_mach_memory_entry_ownership)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct port_obj_tentry {
    pub pos_value: *mut ::std::os::raw::c_void,
    pub pos_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_port_obj_tentry() {
    assert_eq!(
        ::std::mem::size_of::<port_obj_tentry>(),
        16usize,
        concat!("Size of: ", stringify!(port_obj_tentry))
    );
    assert_eq!(
        ::std::mem::align_of::<port_obj_tentry>(),
        8usize,
        concat!("Alignment of ", stringify!(port_obj_tentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<port_obj_tentry>())).pos_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(port_obj_tentry),
            "::",
            stringify!(pos_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<port_obj_tentry>())).pos_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(port_obj_tentry),
            "::",
            stringify!(pos_type)
        )
    );
}
extern "C" {
    pub fn port_obj_init(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut port_obj_table: *mut port_obj_tentry;
}
extern "C" {
    pub static mut port_obj_table_size: ::std::os::raw::c_int;
}
extern "C" {
    pub fn thread_get_register_pointer_values(
        thread: thread_t,
        sp: *mut usize,
        length: *mut size_t,
        values: *mut usize,
    ) -> kern_return_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
